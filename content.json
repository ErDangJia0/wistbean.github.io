[{"title":"怎么才能让自己不要成为韭菜","date":"2018-09-27T14:19:47.000Z","path":"jiucai.html","text":"var ap = new APlayer({ element: document.getElementById(\"aplayer-aUrhnpiI\"), narrow: false, autoplay: false, showlrc: false, music: { title: \"怎么才能让自己不要成为韭菜\", author: \"wistbean\", url: \"http://owx1uvd7t.bkt.clouddn.com/44_2.mp3\", pic: \"\", lrc: \"\" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); 最近看了李笑来老师的新书《韭菜的自我修养》。 前不久李笑来的录音被疯传，我听了，那时候我觉得吧，虽然说的都是大实话，但是里边夹杂了一些脏话，还有一些言论触及到了“韭菜们”脆弱又敏感的心，所以后来就有我们看到的很多骂李笑来的人，说他割韭菜，吃相难看等。 我对他了解不多，只是看过他的一些文章和书，所以这里不想评价李笑来老师，而且，也没资格。 还是来聊聊这本书吧，这本书呢，说的都是大实话，其实书名叫做韭菜的自我修养并不是告诉你怎么成为更好的韭菜。而是告诉我们说，怎么去摆脱韭菜这个宿命。怎么去做交易，如何把控好风险等。 有些人可能会说，我现在又没钱，不需要投资，等自己有钱了再说。这就有点韭菜思维了，越是没钱的时候，越是学习的时候，研究价值再去买卖，是聪明，一进场就买卖再去研究价值，就是愚蠢。 那么什么是韭菜？韭菜这个词在 2018 年特么火，特别是在 P2P 频繁暴雷的时候，大多数人对韭菜的理解就是在做交易的时候赔了钱或者被骗了钱的人。比如那些借钱给 P2P 平台，最后平台跑路了，那么投进去的钱也跟着没了，这时候这些钱没了的人就被认为是韭菜。 我一朋友，之前发现某 P2P 平台收益率挺高，一开始投了点钱，赚了不少，尝到了甜头之后就去申请好多张信用卡，把钱套现了然后都投在了这个 P2P 里面去，后来这个平台爆了，老板跑路了。他整个人都蒙圈了，直接欠下一屁股债。只能说他这根韭菜被割的连渣都不剩。 书中一开始对韭菜的定义是：“在交易市场里边没有赚到钱，甚至赔了钱的势单力薄的散户”，他们一般是缺乏基本的阅读能力，比如购买所有的产品都不会去看说明书的人，他们拒绝学习，拿来主义，伸手党，他们一进场不管三七二十一就买买买，说白了就是有点傻逼。 为什么买就跌，卖就涨？在市场中交易的时候都有这个诡异的现象，就是你一买，他妈的就跌了，你一卖，他妈的就蹭蹭的涨。 这是因为我们是普通人，属于大部分的人，当连你都在讨论某股票的时候，说明行情已经到头了，牛市要结束了。 这时候最好的做法就是别动，啥都不买，等到了熊市，你发现大家都在骂娘的时候，你再买。 但是韭菜不这么做，买了再说。 被套牢了怎么办？有一种最傻逼或者说最惨的投资就是一进场就花掉了自己的钱，不仅如此，还花掉了借来的钱，企图借钱投资，还加上杠杆。 被套牢了慌的一逼，然而对于一些聪明的人来说，他们会怎么做？ 还有钱就慢慢补仓 钱不够就在场外拼命赚钱 不断的学习 投资者和投机者(韭菜)的区别很多人会把长期和短期来对投资和投机作为判断依据，一般认为短期的就是投机，长期的就是投资。可是投机也有长期的，投资也有短期的。比如成功的短期投资，成功的长期投机。 所以投资和投机的判断依据应该是两个字————学习。 投资者更加善于学习，他们会在交易前认真的研究，深入的学习，交易后总结归纳，深入思考，完善下次交易的策略。 而投机者呢？他们拒绝学习，最好有人告诉他怎么买就行，伸手党。这其实就是韭菜，是傻逼。 那些牛逼的交易者，他们都是学习的高手。我很赞同书中的一句话：「思考带来决策，决策带来行动，行动改变命运」。 韭菜的错误观念韭菜们认为交易就是一场零和游戏，也就是说他们认为只要一方的赚钱了，必然意味着另一方的赔了同样的钱，各方的收益和损失相加总和永远为0。 这是一种错误的观念，在牛市的时候，大部分人都赚钱了，赔钱的只有少部分，他们各方的收益和损失相加总和不可能为0。 所以，交易是一种非零和游戏。正因为非零和，买家和卖家之间的思考不一致，才会产生交易。 韭菜没有实力韭菜被割就离场了，并不是因为他们没有耐心，而是因为他们没有实力，也就是没有现金流，没有场外赚钱的能力。所以没有办法去控制仓位。而有实力的人能够慢慢补仓，不着急，所以看起来很有耐心。 韭菜不计算风险获得经验最好的方法就是自己身体力行的去实践，但是对于风险的经验，绝壁不是你自己去实践，而是观察别人冒险，去分析，总结，学习。 要学会计算风险，应该是先胜而后战，打有把握的战，没有 50% 以上的胜率咱们不干。 在投资中有一个叫做「回报风险比」的概念，也就是 回报风险比 = 回报/风险。 显然，回报风险比越高，就越有赚钱的把握。 那么应该如何提高回报风险比呢？ 当然是提高分子，降低分母。 对于分子来说，也就是回报，最好的做法就是买入就不动分子了，不管涨跌，穿越多次牛市。 对于分母来说，也就是风险，风险主要涉及到「止损的设定」和「交易的频次」。 对于止损的设定不是随便乱设置的，应该看交易标的日常波动，结合多种因素设置止损。 交易的频次就要降低，不要狂买狂卖，每次交易都有手续费的。这也是风险的因素之一。 韭菜没有性生活看到一个搞笑的，说的是韭菜在跟女朋友做爱都一直看着手机盯着盘。 大多数韭菜都没有了生活，他们一旦进入交易就整天盯着K线图啥的，而聪明的人是把时间用于认真生活，学习成长，这样他们也更容易做到降低交易频率，从而降低了风险，提高了回报风险比。 韭菜没有周期概念他们谈的更多的是趋势，而这种趋势只是眼前的上升和下降，但这不是趋势，这只是表象。 周期的构成是一个上升的趋势加上一个下降的趋势，而真正的趋势，是要多个周期之后才能展现出来的。 韭菜没有这概念，所以没办法降低交易频率。快入快出，痿了吧？ 相关文章 通过互联网赚钱的 9 种渠道 使用Payoneer将Paypal金额提现人民币到银行卡","tags":[{"name":"互联网","slug":"互联网","permalink":"https://www.wistbean.com/tags/互联网/"},{"name":"个人理财","slug":"个人理财","permalink":"https://www.wistbean.com/tags/个人理财/"},{"name":"赚钱","slug":"赚钱","permalink":"https://www.wistbean.com/tags/赚钱/"}]},{"title":"我艹你妈的，你长得也太好看了吧","date":"2018-09-26T16:00:29.000Z","path":"encourage-more.html","text":"我记得我之前有一个中午在美团上点了外卖，那时候等了很久，外卖还没到。肚子饿得慌，只能催小哥快点。小哥居然没回。 那时候我点了一份粥和一份肠粉。想着这两样做起来也不用多久啊，而且距离我的地方也不远，怎么那么久？ 再等了一会小哥才给我打电话说到楼下了，叫我下去取，我那时候是有点不爽的，打算到楼下屌他一顿。 等我到了楼下，我看到小哥的表情很奇怪，有一种好像考试不及格怕被家长知道的样子。他说：”不好意思啊，我刚骑车的时候摔倒了，把你的餐给撒了。” 我看到那个餐，真是惨不忍睹，筷子都插到餐盒里面去了。小哥的手和脚都擦伤了，贴了几块创可贴，估计是刚买的。 小哥看到我楞了一下急忙说真的对不起，对不起，一边说一边从自己口袋掏出 20 块钱，说是要弥补我。 本来一开始我是有点生气的，但是不知怎么的看到他这样我一点也气不起来。说了句：”没事，钱不用给我了。你也不是故意的。” 小哥差点哭了，执意要给我这 20 块钱。 说真的，我当时完全可以屌他：”你他妈送这么久，还把我的餐弄成这样，吧啦吧啦…”,然后顺手把 20 块钱拿了，顺便在 APP 上给个差评。 但是我没这么做，是因为我突然想到，如果对方是我，我处于这种情况，我一定已经非常自责了，会想很多，肯定会被对方批评，如果被投诉了，那工作就不保了啊。 也就是我当时这么换位一想，说出了那句你也不是故意的。最后我还接过小哥手中的餐，跟他说了声下次路上注意点。 小哥连声感谢，眼圈泛红，一直目送到我走进楼门。 回到家，我反而觉得心情特好，感觉自己做对了一件事情。也明白了，少去批评别人。 批评别人的事情少做，因为人非圣人，每个人都会犯错，因为术业有专攻，每个人都是从小白开始做起。 批评，除了让对方心里难受之外，对方可能还会跟你更多的争论，甚至产生矛盾。倘若我当时批评了小哥，我想他肯定一整天都不在工作状态，心情会很不好，说不定又在路上摔多一次。 批评要少做，相反的，鼓励与赞赏可以多做。 不知道别人怎么样，反正我自己被人夸一下真的会开心，特别是我很努力的把事情做好之后，被团队的朋友说一句彬哥牛逼，虽然我嘴上笑笑说没什么啦，但是内心真的在偷乐。 教你一个骂人骂到对方爽爽的方法，独家秘笈，屡试不爽哈，你一边骂他，他还脸上笑嘻嘻，心里依然笑嘻嘻。 比如你骂他：”我x你妈啊，你也太牛逼了吧”。 或者你骂他：”你他妈的，你怎么做到的，真是太厉害了”。 又或者骂他：”你他妈的，长得也太好看了吧”。 反正就是你骂了人家，要记得在后面夸他一句。而且不要太虚伪的那种，那么这时候他往往会忽略你前面骂他的那一句话。 或许这就是人性吧。 所以呀，当身边的朋友真的做出点小成绩出来，真心的鼓励和赞赏对方，真的能让对方心情好，做事效率更高的。 之前不知道为什么自己照镜子的时候老是对着镜子说：”你他妈长得帅有什么用？”，我想现在我已经知道答案了。 相关文章 读书:一个年轻人和老人的故事 现在已经不像父母那个年代了,花钱也是一种学问","tags":[{"name":"个人提升","slug":"个人提升","permalink":"https://www.wistbean.com/tags/个人提升/"}]},{"title":"PyCharm 使用教程：02 完全定制属于你自己的PyCharm编辑器","date":"2018-09-25T14:06:14.000Z","path":"pycharm-02.html","text":"可以根据你自己的喜好，把 Pycharm 定制成你自己喜欢的样子，接下来说说怎么去定制你的 Pycharm 编辑器。 定制 IDE 颜色根据你的喜好，你可以把 IDE 中的错误信息，面板，代码等颜色进行定制。 使用快捷键 Ctrl+Alt+S 打开 PyCharm 的设置面板，在Editor | Color Scheme | General选择你喜欢的颜色主题，我这里选择的就是 Darcula，喜欢这种黑色的极客范。 PyCharm颜色主题设置 修改界面中默认的字体想要修改 Pycharm 中默认的字体，可以使用快捷键 Ctrl+Alt+S 打开设置面板，然后进入 Appearance &amp; Behavior | Appearance. ,选择Override default fonts by (not recommended)，接着你就可以更改字体和大小了，我个人认为默认的就挺好看了。 PyCharm颜色主题设置 快速调整窗口大小处于垂直方向的窗口可以使用 Ctrl+Shift+上 或者 Ctrl+Shift+下 调整窗口的大小。处于水平方向的窗口可以使用 Ctrl+Shift+左 或者 Ctrl+Shift+右 调整窗口的大小。 PyCharm颜色主题设置 改变你的代码字体大小使用快捷键 Ctrl+Alt+S 打开 PyCharm 的设置面板，进入 Editor | General,把Change font size (Zoom) with Ctrl+Mouse Wheel给选上，然后可以到你的打代码的面板进行骚操作了。 按住 Ctrl 键，然后滚动你的鼠标滑轮，可以看到字体可以根据你的需要变大变小了。 PyCharm颜色主题设置 设置你的快捷键Pycharm 的爽点之一就是可以使用各种快捷键，让你的快的飞起。使用快捷键 Ctrl+Alt+S 打开 PyCharm 的设置面板，进入 Keymap。在这里你可以设置快捷方式，如果你之前使用过其他的编辑器，完全可以选择它们，Pycharm可以延用这些编辑器的快捷键使用。 另外，如果你想对个别的快捷键设置，只需要 右键–&gt;Add keyboard shortcut 进行设置就可以了。 往后有时间介绍一些常用的快捷键吧，让你的编辑器飞起来。 PyCharm颜色主题设置 设置你的代码风格进入设置面板，然后进入Editor | Code Style | Python ,可以设置你的代码风格，比如 tab 有几个空格，其实我觉得默认就挺好了。 PyCharm颜色主题设置 ok，以上就是PyCharm常用的定制方式。","tags":[{"name":"教程","slug":"教程","permalink":"https://www.wistbean.com/tags/教程/"},{"name":"PyCharm","slug":"PyCharm","permalink":"https://www.wistbean.com/tags/PyCharm/"},{"name":"python","slug":"python","permalink":"https://www.wistbean.com/tags/python/"}]},{"title":"购买搬瓦工VPS省钱攻略：获取搬瓦工优惠码","date":"2018-09-25T06:44:18.000Z","path":"banwagong-coupon.html","text":"隐藏的搬瓦工优惠码搬瓦工VPS的性价比还是挺高的，搬瓦工其实有一个隐藏的优惠码，这个优惠码隐藏在搬瓦工的源代码中，使用这个优惠码可以得到优惠。 获取搬瓦工优惠码进入获取优惠码的搬瓦工官网 ，可以看到这里有一些供你选择的服务器，目前 19 刀一年对于个人来说完全够用： 搬瓦工vps 选择你需要的服务器，点击「Order KVM or OpenVZ」进入购买页。 搬瓦工vps 接着点击 「Order KVM」进行购买。 搬瓦工vps 这时候可以选择想要购买服务器的时长和服务器所处的位置。选择完之后不要急着点击 「Add to Cart」。 这时候就可以获取隐藏的优惠码了，我们对着这个网页：鼠标右击–&gt;查看网页源代码。 接着 Ctrl + F 搜索 code ，这时候你就会看到 Try this promo code: xxxx，这里的xxxx就是优惠吗，把它复制下来。 搬瓦工vps 然后回到我们的购买页，点击「Add to Cart」添加到购物车。 可以看到这里有一个 Promotional Code，我们输入刚才复制的优惠码，然后点击 「Validate Code」。可以发现得到了优惠，这里我用 320G 的VPS 为例，优惠了 4.8%： 搬瓦工vps 接着就可以以比别人更便宜的价格点击 CheckOut 付款啦。 相关文章 使用搬瓦工快速搭建自己的VPN CentOS快速搭建一个属于自己的IPsec/L2TP VPN","tags":[{"name":"搬瓦工","slug":"搬瓦工","permalink":"https://www.wistbean.com/tags/搬瓦工/"}]},{"title":"「3-2」使用 PowerDesigner 逆向生成 MySQL 数据库","date":"2018-09-23T17:42:42.000Z","path":"java-ssm-3-2.html","text":"SSM视频教程第3-2节：PowerDesigner逆向的生成MySQL SSM视频教程第 3-2 节课程概要 PowerDesigner 创建物理模型 PowerDesigner 创建商品分类表、商品表 PowerDesigner 设置注释以及默认值 PowerDesigner 连接MySQL服务器配置 PowerDesigner 逆向生成数据表 PowerDesigner 破解版PowerDesigner 破解版工具分享在知识星球，仅提供给会员使用。 SSM视频教程目录 SSM视频教程目录 相关文章 PowerDesigner逆向生成MYSQL数据库表结构总结 powerdesigner连接MySQL数据库及逆向生成PDM","tags":[{"name":"教程","slug":"教程","permalink":"https://www.wistbean.com/tags/教程/"},{"name":"Java","slug":"Java","permalink":"https://www.wistbean.com/tags/Java/"},{"name":"Java视频教程","slug":"Java视频教程","permalink":"https://www.wistbean.com/tags/Java视频教程/"},{"name":"项目实战","slug":"项目实战","permalink":"https://www.wistbean.com/tags/项目实战/"},{"name":"分布式","slug":"分布式","permalink":"https://www.wistbean.com/tags/分布式/"},{"name":"SSM","slug":"SSM","permalink":"https://www.wistbean.com/tags/SSM/"},{"name":"EasyUI","slug":"EasyUI","permalink":"https://www.wistbean.com/tags/EasyUI/"}]},{"title":"PyCharm 使用教程：01 安装PyCharm","date":"2018-09-23T06:21:00.000Z","path":"pycharm-01.html","text":"PyCharm 给 Python开发人员提供了很多的基本工具，能够让我们在上面很爽的开发我们的 Python 代码。 Python 出自 jetbrains,如果你开发过 Android 或者 JAVA, 那么你应对 Android Studio 和 Intellij IDEA 不陌生，它们都是基于jetbrains的编辑器。不得不说，各种快捷键和插件真的是牛的一批。 PyCharm 的版本PyCharm 有三个版本，它们分别是： Professional Community Educational Community 和 Educational 版本是开源的，可以免费使用，不过呢，能用的功能相对来说就比较少了，Professional 版本提供了一整套优秀的工具。看你自己喜欢，我自己下载的是 Professional 版本。 下载安装PyCharm点击PyCharm下载，根据你自己的操作系统选择下载相应的文件。 PyCharm 安装完成之后，如果你是第一次使用 PyCharm 的话，那么直接选择「 Do not import settings 」就可以了： 选择PyCharm主题接着 PyCharm 会让你选择主题，有 Default 主题还有 Darcula 的，我这里选择 Darcula ，感觉极客一点。不过现在随便选也没关系，因为等下进入可以自己设置。 下载安装PyCharm插件PyCharm的牛逼之处之一就是拥有丰富的插件，正是有了这些插件才让我们在开发的时候爽歪歪，比如有 MarkDown 插件，Git插件，Vim插件，太多了，如果你现在不太清楚有什么插件用的话，没关系，往后我写篇专门介绍插件的推荐及使用。 当你安装完成之后， Pycharm 会有一个窗口是这样的，直接点击 「Create New Project」来新建一个项目， open 是打开已有的项目，我们一开始木有，所以先创建吧： 激活PyCharm如果你用的是 Professional 版本的PyCharm，是需要收费的，不过它有30天免费的试用，激活的方式有三种： JetBrains Account Activation code License server 如果你是学生党或者老师的话，那么你可以使用你的学生证免费授权申请方式获得专业版本。是不是很良心，不仅如此，官方还给初创公司50%折扣优惠，如果你所在的是创业公司，资金预算不是很多的话，不妨去申请优惠：针对创业公司的优惠计划 假如你既不是学生也不是老师，也不在初创公司，钱暂时不是很多的话，可以在公众号「学习python的正确姿势」发送 pycharm 获取激活码。 相关文章 python3入门基础有趣的教程","tags":[{"name":"教程","slug":"教程","permalink":"https://www.wistbean.com/tags/教程/"},{"name":"PyCharm","slug":"PyCharm","permalink":"https://www.wistbean.com/tags/PyCharm/"},{"name":"python","slug":"python","permalink":"https://www.wistbean.com/tags/python/"}]},{"title":"为了不跟产品经理干起来，我决定学点产品思维","date":"2018-09-21T11:04:39.000Z","path":"product-thinking.html","text":"以前我在跟产品经理讨论的时候，常常发现我们聊的不在同一个点上。我想的更多的是这个功能能不能实现？怎么实现？需要多少时间？怎么写代码好点？而产品经理想的更多的是用户的需求，用户喜欢怎么样的操作，怎么样才能让用户更方便的使用等。 可以看得出来，我和产品经理的思维方式是不同的，那会我只是局限于这个功能本身所需要的技术，而产品经理考虑的更多的是用户本身的需求。 我也经常发现有许多程序员和产品经理互怼，其实他们都希望这个产品更好，但是思维方式不同，考虑的地方不一样，所以经常说着说着就吵起来，甚至动手。我想如果程序员能够有点产品思维，那么应该会有更多的同理心，这样沟通起来应该会更加高效。所以后来我就去了解学习产品方面的知识，在这过程中我发现，其实产品涉及到的东西很多。并不是仅仅局限于交互，用户的需求。 以前在学编程的时候，有一个叫做「面向对象」的概念，那会人们都说「万物皆对象」，说的是每个事物本身就是对象，它有自己的属性，有自己的功能，可以提供服务。后来我发现，其实对象就是产品，也就是说「万物皆产品」。 最近我就在想，如果是我自己做一款产品，我会怎么做呢？是想到做什么就做什么？还是由着自己的喜好来？ 其实都不对，首先应该要做的是面向用户，是面向大部分的用户还是面向小部分用户，如果你去看早期的互联网产品大多都是面向大部分用户的，到了后来许多产品就主攻部分用户。我想应该是刚开始的时候红利期，所以面向大部分用户是个大机会，而到了后来市场需求基本满了，这时候更多人愿意做的是 「1cm宽，100m深」的事情了。也就是所谓的垂直化。 做一款产品确定方向只是开始，接着还需要了解调查目标用户的需求，挖掘用户的需求点通常都是通过用户的人性，比如刚需的衣食住行，人性的一些弱点（贪婪，虚荣，攀比，装逼，好色，懒惰等等），看下现在的拼多多，饿了么，滴滴打车，1024论坛等都无不体现出来。 一般来说，发现用户的需求有痛点，痒点，爽点。 痛点说的是用户的刚需，就是用户本身有需求，而且这种需求是极度渴望被满足的。比如你在沙漠里面没水喝，这时候给你一瓶矿泉水，那么矿泉水就是产品，解决了你的痛点。 而痒点说的使用户有这需求，但是不一定要被满足，比如说你肚子饿了，你是选择吃方便面还是吃一顿海底捞？我想你应该内心肯定选的是海底捞，而这里的海底捞就是你更深层次的需求，但是，不是你的刚需，这就是你的痒点。 再说说爽点，这是用户更高一层的需求了，精神上的愉悦需求，吃饱喝足，干点啥？刷抖音？玩游戏？这些产品就是满足了你的爽点，顾名思义，就是让你用起来感到爽。 挖掘了到了需求然后呢？ 需要紧跟趋势找到自家产品的解决方案，紧跟趋势是关键，可以看到从PC到移动，有多少产品死在了PC时代，又爆发出多少移动端的产品。假如有两个人有着共同的idea，也明确了需求，一个人去做PC网站，一个人去做小程序，你说，哪个会更好？答案显而易见了吧。 当然了，产品涉及的还有很多，比如怎么去做差异化的竞争，怎么利用现有的资源去创造价值，怎么写文案，怎么推广，怎么营销，怎么打造品牌，怎么做数据分析，怎么拓展业务等等都是产品。 所以我认为不要把思维局限于本身的专业领域，学点产品思维是对自己很有帮助的，如果在生活中能够以产品的思维去看待事物，或许能提高我们的思维认知能力。","tags":[{"name":"互联网","slug":"互联网","permalink":"https://www.wistbean.com/tags/互联网/"},{"name":"肯定会电台","slug":"肯定会电台","permalink":"https://www.wistbean.com/tags/肯定会电台/"}]},{"title":"「3-1」 后台管理系统 EasyUI 的使用","date":"2018-09-18T16:40:25.000Z","path":"java-ssm-3-1.html","text":"SSM视频教程第3-1节：后台管理系统 EasyUI 的使用 SSM视频教程第 3-1 节课程概要EasyUI 的使用EasyUI for jQuery 的资源文件下载地址：Download EasyUI Package EasyUI 的官方文档：Documentation 本节使用到的组件Layout EasyUI 布局 Tree EasyUI 菜单 Tabs EasyUI 导航标签 DataGrid EasyUI 表格 SSM视频教程目录 SSM视频教程目录 相关文章 jQuery EasyUI 教程 EasyUI 中文网","tags":[{"name":"教程","slug":"教程","permalink":"https://www.wistbean.com/tags/教程/"},{"name":"Java","slug":"Java","permalink":"https://www.wistbean.com/tags/Java/"},{"name":"Java视频教程","slug":"Java视频教程","permalink":"https://www.wistbean.com/tags/Java视频教程/"},{"name":"项目实战","slug":"项目实战","permalink":"https://www.wistbean.com/tags/项目实战/"},{"name":"分布式","slug":"分布式","permalink":"https://www.wistbean.com/tags/分布式/"},{"name":"SSM","slug":"SSM","permalink":"https://www.wistbean.com/tags/SSM/"},{"name":"EasyUI","slug":"EasyUI","permalink":"https://www.wistbean.com/tags/EasyUI/"}]},{"title":"GitHub是什么？如何使用？","date":"2018-09-15T11:53:09.000Z","path":"github.html","text":"GitHub是什么？GitHub就有点像微博，我们可以在上面看一些牛逼的人物写着开源的牛逼代码，觉得喜欢的话就给他们点赞，关注他们，甚至可以直接把他们的源代码拉下来，看着他们的代码，忘了那个她！ GitHub的首页有这样介绍：A better way to work together，也就是说我们除了去关注牛逼的人物还可以在上面一起合作写点东西出来，给我们提供一种更好的合作方式。 github GitHub简单来说就是基于 Git 的版本托管服务系统，是全球最大的社交编程及代码托管网站，因为里面大多都是男的在玩，所以说是全球最大的同性搞基社区，哈哈哈！ GitHub有什么用？其实GitHub除了可以让我们代码托管和多人在上面一起协作完成项目之外呢，我们还可以在上面建立自己的博客网站，官方称为GitHub Pages，你可以在GitHub上面创建一个仓库，以github.io为后缀，可以托管你自己的博客网站，直接通过你的仓库名就能在线的访问你的网站了，而且完全免费，我自己搭了个网站托管在上面好久啦，感觉棒棒哒！地址在这：http://www.wistbean.com (以前不知道听谁说，嫁人就要嫁给有自己网站的人，所以我就建了一个，嘿嘿嘿！) github 如果你有什么优秀的开源项目在上面被人点赞（star）或者 Folllow,那就很 666 的了，因为在 Github 上面被人点赞要比你在朋友圈被人点赞要难的多的多。如果在上面托管你自己的比较有影响力的开源项目，在面试的时候提供给对方看，也是一个很不错的加分项！ Respository我们通常说在GitHub上面新建一个项目，这个项目就会在Respository里，Respository也就是仓库的意思，可以通过git使我们本地的项目与远程仓库保持同步，这样妈妈就不用担心我们的代码消失不见了！ Issue随着我们的代码提交的越来越多，当有人发现你的开源项目不错，就把你的代码给拉（clone）到他们本地，他们运行后发现有 bug 或者觉得你的代码有问题，那么他就会给你提Issue，我们可以发现他们的Issue，然后我们解决完bug之后可以将其 close 掉，表示我们已经修复了这个bug！ Star我们去github看别人的开源项目的时候，发现很是不错，那我们就可以给这个项目 star 一下，也就是点赞，同时也是收藏的意思，在我们自己的star列表可以看到我们star过的项目。 Fork如果你对别人的项目感兴趣，或者对他感兴趣，你可以去fork他的项目，fork 之后你就会发现，你自己的仓库里面竟然有一个和他一模一样的项目，更加爽的是，你竟然可以在他原有代码的基础上进行修改或者添加功能！ Pull Request你给他添加完功能之后你发现，哇靠，我简直就是天才啊，这时候你是不是想告诉他，你这样的功能有多牛逼，那么这时候你就可以给他 Pull Request ，这时候他就看到你的代码，如果他觉得不错，接收了你的 Pull Request 之后，他就可以合并起来，这样他的项目就有你的一部分了！ WatchWatch 就是观察，当你 Watch 了某个项目，就相当于你关注了它，那么这个项目有什么动态，你都可以实时的获取更新。 Gist如果你想分享部分代码片段，可以使用 Gist，专门来分享代码片段的！ GitHub上一些不错的开源项目free-programming-books这个项目被 star 了10w+，有我一份力量哈哈，这个项目之所以这么多star，是因为它含有许多免费的编程书籍，并且支持许多语言的版本！中文版地址在这：https://github.com/EbookFoundation/free-programming-books/blob/master/free-programming-books-zh.md#%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86 LearningNotes这个项目含有许多android，java，设计模式，算法等面试相关的知识与经验，受益匪浅！地址：https://github.com/francistao/LearningNotes ResumeSample这个项目是专门为程序员提供的简历模板，包括PHP程序员简历模板、iOS程序员简历模板、Android程序员简历模板、Web前端程序员简历模板、Java程序员简历模板、C/C++程序员简历模板、NodeJS程序员简历模板、架构师简历模板以及通用程序员简历模板 ！地址：https://github.com/geekcompany/ResumeSample 当然了还有许多牛逼的（比如google,Apache等开源项目）项目在上面等着你去发现！ 还可以在GitHub上买东西呢！GitHub上有个shop，里面有许多含有github logo的杯子呀，衣服呀，电脑贴纸呀，真的很酷炫和可爱！ github GitHub的视频教程我录了一个GitHub的视频教程，专门讲 Git 和 GitHub 的使用的，你可以在这里观看： 代码托管Git的使用 GitHub完全使用指南 GitHub参考文章 GitHub - 维基百科，自由的百科全书 Github 简明教程 Github全程指南-如何高效使用？ 使用GitHub","tags":[{"name":"Git","slug":"Git","permalink":"https://www.wistbean.com/tags/Git/"},{"name":"GitHub","slug":"GitHub","permalink":"https://www.wistbean.com/tags/GitHub/"}]},{"title":"轻松理解UML用例图时序图类图的教程","date":"2018-09-15T06:17:07.000Z","path":"uml.html","text":"写在前面当你老大扔给你这样的图，或者你需要完成某些功能而去看文档的时候发现以下类似这样的图会不会不（一）知（脸）所（懵）措（逼）： UML （图片来至wikipedia） （图片来至微信内网页支付时序图） （图片来至wikipedia） 如果你看了都不会一脸懵逼，那么可以出门左转啦，这篇文章就是来说明这些图的意思，让你在工作交流中，或者在看一些文档，或者看我的一些关于设计模式的文章，甚至架构建模中，都能轻松理解，毫无压力！ UML的用例图刚刚我们看到的第一张图片就是用例图，用例图有以下几个东东： 用例 参与者 关联 系统边界 用例使用椭圆来表示，椭圆里边写上用例的名称： 参与者用一个小人儿，在小人儿下面写上参与者名称,例如学生： UML actor 关联用一条线儿表示： 把用例围起来，系统边界就用个矩形啦： UML boundary 举个例子： 我们可以看到这个 系统叫做 「购物系统」 ；有注册账号、登录系统、生成订单的用例（这里只列举几个用例，其它用例省略）；参与者有顾客和管理员；顾客关联到了注册账号和登录系统的用例；管理员关联到了登录系统和生成订单的用例！ UML的时序图时序图就是我们刚刚看到的第二个图，时序图有以下几个东东： 对象 生命线 活动条 消息 控制流 顺序 分支 循环 对象在矩形里边，左边是对象名称，右边是对象类型，下方还有一条线： 用虚线代表的是对象的生命线： UML 时序图 活动条是一个竖着的矩形，当接收到消息的时候，这个对象就会有活动条： UML 时序图 消息用一根箭头，箭头上面写上消息信息，例如一个登录方法 login(userName,passWord): UML 时序图 控制流有三种，普通就是按顺序的一个流程，还有分支就相当于if else： UML 时序图 矩形里边有一条虚线，左上角用ALT表示，当C为true的时候，就执行虚线上方的内容，当C为false的时候就执行虚线下方的内容。 循环控制流： UML loop 左上角有LOOP表示循环，当C为true的时候，就循环执行方框里边的内容！ 举个UML时序图例子： UML sequence diagram 可以看到，每个对象都有它们的生命线（虚线）； 一开始用户给类型为GUI（界面）的Login对象发送一个登录信息 「 login（userName，passWord）」 ； Login这个对象接收到了就会产生活动条，这时候Login这个界面会给类型为Controller的loginController发送登录信息「 login（userName，passWord）」 ； 此时loginController接收到信息产生活动条，这时候loginController去找类型为DB的UserDao，给它发送了一个获取用户密码的信息 「getUserPassword(userName)」； UserDao接收到信息后产生活动条，返回用户的密码； 此时loginController接收到信息（用户的密码 userPassword），loginController此刻将信息发送给自己，通过verify去校验密码并且用result接收结果； 校验就产生了分支控制流，当resul为true的时候loginController会发送success给Login，当result为false的时候，loginController会发送failure给Login； 最后Login最后给用户发送messag信息。 好了，当你看到这里的时候，你就会发现，以后关于这类的时序图对你来说已经不在话下了。例如本文一开始的第二张图。 UML的类图类图有以下几个东东： 类名 属性 方法 可见性 数据类型 关联关系 依赖关系 继承/实现关系 组合/聚合关系 类名、属性、方法在一个矩形中，分为上中下： UML class 可见性： private的时候在前方用 - 表示 public的时候在前方用 + 表示 protected的时候在前方用 # 表示 数据类型表示形式： 名字 ： 类型 例如： uml userName 和 passWord 这两个属性是protected修饰的，数据类型都是String；login() 和 register() 这两个方法是public修饰的，数据类型都是boolean； 关联关系,用实线表示，例如A关联B： uml 关联关系 依赖关系，用虚线表示，例如A依赖B： uml 依赖关系 继承关系，用一个△ + 一条实线表示，例如A继承B： uml 继承关系 依赖关系，用过一个△ + 一条虚线表示，例如A实现B： uml 依赖关系 组合关系，用一个 ♦ + 一条实线表示,例如A组合B： uml 组合关系 聚合关系，用一个 ◇ + 一条实线表示,例如A组合B： uml 聚合关系 聚合：表示两个对象之间是整体和部分的弱关系，部分的生命周期可以超越整体。如电脑和鼠标。 组合：表示两个对象之间是整体和部分的强关系，部分的生命周期不能超越整体，或者说不能脱离整体而存在。组合关系的“部分”，是不能在整体之间进行共享的。 类图举例子： UML 类图 可以看到，有User类，Customer类，Address类，Role类，Payment类，aliPay类，wechatPay类。 其中Customer 继承 User，User类的userName 和 passWord 这两个属性是protected修饰的，数据类型都是String；login() 和 register() 这两个方法是public修饰的，数据类型都是boolean； Address和Role聚合User； Customer依赖Payment； aliPay 和 wechatPay 实现了 Payment！ 以上，就是关于UML的用例图，时序图，类图！当然可以自己手动画几个试试，感觉挺不错哦，相信你在工作交流中，或者在看一些文档，或者看我的一些关于设计模式的文章，甚至架构建模中，都能轻松理解，毫无压力！ 参考资料 官方UML Web站点 UML基础统一建模语言简介 UML实践详细经典教程 w3cschool UML教程 统一建模语言","tags":[{"name":"教程","slug":"教程","permalink":"https://www.wistbean.com/tags/教程/"},{"name":"Java","slug":"Java","permalink":"https://www.wistbean.com/tags/Java/"},{"name":"UML","slug":"UML","permalink":"https://www.wistbean.com/tags/UML/"},{"name":"用例图","slug":"用例图","permalink":"https://www.wistbean.com/tags/用例图/"},{"name":"时序图","slug":"时序图","permalink":"https://www.wistbean.com/tags/时序图/"},{"name":"类图","slug":"类图","permalink":"https://www.wistbean.com/tags/类图/"}]},{"title":"读书:一个年轻人和老人的故事","date":"2018-09-13T17:45:26.000Z","path":"present.html","text":"肯定会电台 42 期 讲故事之前在多年前，我跟朋友借阅了一本书，名字叫《礼物》。 刚开始我是被书名和封面吸引，看了内容之后，我觉得很棒。最近又看了这本书，书不厚，一两小时就能看完，但是作者却花了 5 年时间写了这本书，里面讲了一个关于年轻人和老人的故事。 这个故事是一份礼物，这份礼物每个人都可以获取，而且对于每个人来说，都是独一无二的，如果你找到了这份礼物，你就能更加的幸福，成功，牛逼。 接下来，我就把这个礼物分享给你，也许看完之后，你也可以找到自己的礼物。 老人与年轻人 礼物的故事年轻人在小的时候就认识了老人，老人跟他讲了一个关于礼物的故事，老人告诉他这个礼物是他一生中最珍贵的，需要自己去寻找。如果找到了这个礼物，那么他就会获得很多财富，也会很幸福，很成功，很牛逼。 年轻人很想得到这份礼物，于是各地的去寻找，用尽了所有方法，看书，上网搜索等等。可是找了很久也找不到。慢慢的，年轻人失去了耐心，就不再去鸟这个礼物了。 后来年轻人开始工作了，不过工作很不顺。虽然他每天都很努力的工作，完成了分内的事情，但是最后还是没有得到晋升，他非常气愤，每天下班回家都感觉到非常的疲倦，不开心。不仅如此，他和他的女票也分手了，失恋的他更是无法振作起来。他的那段日子用现在的话来说就是日了狗了。 年轻人想到了之前老人跟他说的礼物的故事，于是决定找老人谈谈，老人告诉他：“其实这个礼物你本来就知道了的，只是现在没有意识到而已。多想想你感到有效率的时刻，感到快乐的时刻。” 老人建议他把当前的事务先放一放，别太着急找礼物，说不定放轻松一点，答案就出来了。 年轻人听了老人的劝，独自一人去山间的小屋住了一段时间，放慢了自己的生活节奏，有一天晚上，他发现了这个礼物。 他在黑暗的房间点起了火，突然看到眼前的壁炉，他发现这简直就是艺术品，壁炉是由许多的石头砌成的，可以看得出来当初那个砌壁炉的师傅非常用心，每块石头都是精心打磨，精挑细选而成。 年轻人突然发现了什么，这不就是老人跟他说的么，「要得到这个礼物，就多想想自己曾经感到有效率的时刻，感到快乐的时刻。」砌壁炉的师傅在砌壁炉的时候肯定是心无旁骛的，他想象师傅在工作时专注的样子。突然明白了，这个礼物就是专注于此刻正在发生的事情。年轻人不去想过去的烦心事，也不担忧将来的问题，他此刻关注的是眼前的事物，他突然发现，自己不自觉的开心起来，之前从来没有注意到，只把握此刻正在发生的事情原来就是礼物。 难道这个礼物就这么简单？年轻人虽然有点疑惑，但是他现在已经不去想那么多了，只是着手于眼前正在发生的事情，他发现了之前许多没有认真去注意的东西。他也发现，只关注于此刻，自己会变的比以前开心很多。 回来之后，年轻人迫不及待的告诉老人自己发现了这个礼物，老人在跟年轻人谈话的时候，精神全都集中与年轻人谈话上，认真倾听，认真解答。年轻人有个困惑，如果当前处于很坏的情况下，能够把握此刻么？ 老人告诉他如果在这种情况下你能专注于此刻，那么你就会发现有些困难和折磨是可以得到改变的，比如说你之前上班不如意，你是经常走神还是完全专注于工作中重要的事情上？你跟你女票相处的时候，你有没有完全投入其中，觉得你女票非常重要？ 年轻人明白了，专注于此刻正在发生的事情，发现其中好的方面，并在其中建立信心和勇气，将注意力专注于此刻重要的事情上。年轻人开始重视自己，专注于眼前的事情，慢慢的他的工作效率越来越高，身边的同事和领导都发现了他的变化，年轻人越来越被得到重视。 我想这种专注于此刻就是沉浸于当前正在发生的事情上，比如我们在啪啪啪得正嗨时候，哪有时间去想自己以前过错和未来的烦忧，在看小视频的时候，那一刻我们的注意力完全集中在女主角和剧情中（虽然有些剧情很少），玩游戏，看小说也是如此，那一刻都沉浸其中。 但是如果把这样的专注放到学习中，工作中，就没那么容易了，因为这些事情并不会让我们上瘾，遇到一些未知的领域常常会让人知难而退，忘了专注于此刻。这个时候往往需要想办法，让自己对其“上瘾”。 我有时候晚上写文章或写代码，写着写着一抬头，挖槽，天居然亮了。我想我那时候就是在专注于当前正在发生的事情，每每把事情做完就会觉得特别开心。 所以现在常常会提醒自己，单线程做事，专注于此刻，做好当下的事情。 年轻人越来越觉得幸福，每天都享受当下的时刻，过了一段时间之后，年轻人跟一个人负责一个项目，不过他的搭档不给力，他没有劝说搭档用心工作，而是自己承担了所有职责，慢慢的，年轻人感到力不从心，项目落后了，上级感到失望，觉得之前对他的晋升是个错误的选择。 年轻人知道需要专注于此刻，但是现在总感觉很沮丧，老是想着这个项目和不努力的搭档。他很想知道，如果老人遇到这种情况，会怎么处理？于是他又去找老人谈谈。 老人给了年轻人答案：“每个人都会犯错，而有些人能够更好的把握此刻是因为他们会从过去学习，而不是忽略过去。我们不能改变过去，也不能活在过去，但是我们可以从过去中学习，今天就采用不同的做法，而不是重蹈覆辙，用心的体会过去，吸取其中的经验与教训，这样能让我们更好的把握此刻的乐趣。” 年轻人有点疑惑：“那什么时候该专注于此刻？什么时候向过去学习呢？” “只要你此刻感到不快乐，想更多的享受此刻，就可以向过去学习。”向过去学习的话可以问自己 3 个问题： 1.过去发生了什么？ 2.我从中学到了什么？ 3.如果同样的事情再次发生，现在可以采取什么不同的做法？ 年轻人开始重视向过去学习了，他审视了过去，开始对自己的合作伙伴坦诚的说出自己的想法，希望对方能够和他一起努力完成这个项目，合作伙伴慢慢的被他的真诚所感动，于是开始用心起来，他们的项目完成的特别好，最后年轻人又得到了领导的重视和晋升。年轻人和他的女票感情也越来越好。 现在想想我和这年轻人差不多，也是很少向过去学习，经常把过去给忽略了，没有从过去学习，有时候会在同样的地方掉几次坑，有时候我发现项目出现的 bug，之前就出现过，但是那时候我仅仅是把它解决就完事了，没有从中去做总结吸取经验，下次遇到同样的问题，又得重新审查一遍。 所以我觉得当我们能够从过去吸取经验，然后更好的专注于此刻，才能把过去的包袱丢掉。 年轻人和以前发生了许多变化，职位也比以前高了不少，但是他又遇到新的问题了，他发现他现在要做的事情越来越多。没办法做到每件事都尽善尽美，他发现自己花费太多时间在次要的事情上了，而对于重要的事情总是做不完的感觉，慢慢的年轻人对眼前的工作失去掌控，又被上级一顿怀疑，年轻人垂头丧气，只能再去找他的老朋友。 年轻人从老人那里得知自己还没有领悟到礼物的第三个重要因素，就是将来。 年轻人觉得如果老是想着自己的将来，想着自己什么时候能买上房，什么时候能买上车子，那就不能专注于此刻了，还会让自己更加迷茫。老人表示非常赞同，如果我们老是活在对将来的空想中，就会迷茫，但是我们可以着手创造未来，老人跟年轻人说：“如果你对将来的想法是消极的，那么你今天的行动就是消极的，而你明天创造出来的结果就是糟糕的。” 老人让年轻人想象自己的美好的将来，仔细的想着每个细节，越清晰越好，然后指定一个计划，这个计划可以让自己更清楚接下来怎么走，今天就按计划做一些事情，让它成真，这样的话我们对此刻的担忧就会减少，对未来的方向也会更明确。只要自己想将来比此刻更好，就可以着手创造未来。 年轻人回去之后，开始想象美好的将来，并制定每天的计划，对事情的轻重缓急安排进日程，年轻人不再像以前那样迷茫了，也越来越得到了认可。 以前我在做项目的时候，有时候项目比较多的功能，一开始看到是很懵逼的，一想到要搞完这个项目就头大，后来自己用了 todolist 的工具，每天给自己制定一些计划，今天完成什么功能，写什么文档。然后没做完一件事就划掉相关的事项，每划掉一次就感觉又离目标进了一点，不再像一开始那么懵逼了。我想这和老人说的着手创建未来有一点想通之处。 有时候我睡前也会常常想自己的未来，想很多乱七八糟的事情，除了让我更迷茫之外，没有一点好处。 不可避免的事情还是发生了，老人去世了。 年轻人已步入中年，他回到和老人一起谈话的地方，一个人思索着和老人的点点滴滴，明白了老人生前做的每件事情都是有明确的目标，年轻人此刻又明白了：把握现在，向过去学习和着手创建未来并不是全部。 只有当自己的生活和工作有了明确的目标，对过去，现在，将来重要的事情做出回应的时候，一切才有意义。 年轻人完全明白了这个礼物的含义。也领取了属于他自己独一无二的礼物。 讲故事之后故事讲完了，这个礼物是：当你想过的更夸了更高效的时候，把握此刻。当你想让现在比过去更好的时候，向过去学习。当你想让将来比现在更好的时候，着手创建未来。当你想发掘让你工作和生活更有意义的时候，明确自己的目标。 我把这个礼物分享给你。希望你也可以获取属于你自己独一无二的礼物。 你愿意把这份礼物分享给你的朋友吗？ 相关现在已经不像父母那个年代了,花钱也是一种学问肯定会电台节目","tags":[{"name":"肯定会电台","slug":"肯定会电台","permalink":"https://www.wistbean.com/tags/肯定会电台/"},{"name":"个人提升","slug":"个人提升","permalink":"https://www.wistbean.com/tags/个人提升/"},{"name":"精华分享","slug":"精华分享","permalink":"https://www.wistbean.com/tags/精华分享/"}]},{"title":"Java进阶SSM分布式项目实战视频教程","date":"2018-09-10T07:42:30.000Z","path":"java-ssm-video.html","text":"Java SSM视频实战教程，从0到1，打造一个电商的分布式高并发项目。 SSM视频教程面向的人群 具备有一定的java基础 初级Java开发者 -&gt; 中高级Java开发者 具备一定的自学能力和执行能力 SSM视频教程的技术选型 Spring Spring MVC Mybatis redis solor EasyUI UEditor JQuery Freemark activMQ httpClient MySQL SSM视频教程的开发环境 InteliJ IDEA Maven Tomcat7 JDK Nginx Git postman sqlyog win7 SSM视频教程的学习计划 技术架构 （集群和分布式架构的区别） 工程搭建 （maven） SSM框架的整合 Mybatis逆向工程以及使用 日志的添加与使用 拦截器 后端功能 （系统的开发，图片系统，数据等等） 前端功能 （商品浏览，下订单，购物车等等。。） redis使用以及集群搭建 solor使用和集群搭建 JMS 消息队列 （activMQ） sso单点登录 restful服务 在Linux上部署 SSM视频教程目录Java进阶SSM第一期 1.分布式高并发java web项目实战视频教程介绍 2.Java传统的集群架构和分布式架构区别 3.代码托管Git的使用 4.GitHub完全使用指南 Java进阶SSM第二期 1.什么是Maven，Maven的配置 2.码农商城 SSM 系统所需的 Maven 模块简介 3.使用 InteliJ IDEA 创建 Maven 项目与相关配置 4.使用InteliJ IDEA 创建分布式多模块 Maven 项目 5.使用InteliJ IDEA 创建 Maven 聚合工程 6.Java SSM框架的整合与Mybatis逆向工程 Java进阶SSM第三期 1.后台管理系统 EasyUI 的使用 2.使用 PowerDesigner 逆向生成 MySQL 数据库 持续更新中 相关阅读 Java初学者的学习路线","tags":[{"name":"Git","slug":"Git","permalink":"https://www.wistbean.com/tags/Git/"},{"name":"Nginx","slug":"Nginx","permalink":"https://www.wistbean.com/tags/Nginx/"},{"name":"Java","slug":"Java","permalink":"https://www.wistbean.com/tags/Java/"},{"name":"项目实战","slug":"项目实战","permalink":"https://www.wistbean.com/tags/项目实战/"},{"name":"分布式","slug":"分布式","permalink":"https://www.wistbean.com/tags/分布式/"},{"name":"Maven","slug":"Maven","permalink":"https://www.wistbean.com/tags/Maven/"},{"name":"InteliJ IDEA","slug":"InteliJ-IDEA","permalink":"https://www.wistbean.com/tags/InteliJ-IDEA/"},{"name":"Spring","slug":"Spring","permalink":"https://www.wistbean.com/tags/Spring/"},{"name":"Spring MVC","slug":"Spring-MVC","permalink":"https://www.wistbean.com/tags/Spring-MVC/"},{"name":"Mybatis","slug":"Mybatis","permalink":"https://www.wistbean.com/tags/Mybatis/"},{"name":"EasyUI","slug":"EasyUI","permalink":"https://www.wistbean.com/tags/EasyUI/"},{"name":"SSM视频教程","slug":"SSM视频教程","permalink":"https://www.wistbean.com/tags/SSM视频教程/"},{"name":"redis","slug":"redis","permalink":"https://www.wistbean.com/tags/redis/"},{"name":"solor","slug":"solor","permalink":"https://www.wistbean.com/tags/solor/"},{"name":"UEditor","slug":"UEditor","permalink":"https://www.wistbean.com/tags/UEditor/"},{"name":"JQuery","slug":"JQuery","permalink":"https://www.wistbean.com/tags/JQuery/"},{"name":"Freemark","slug":"Freemark","permalink":"https://www.wistbean.com/tags/Freemark/"},{"name":"activMQ","slug":"activMQ","permalink":"https://www.wistbean.com/tags/activMQ/"},{"name":"httpClient","slug":"httpClient","permalink":"https://www.wistbean.com/tags/httpClient/"},{"name":"MySQL","slug":"MySQL","permalink":"https://www.wistbean.com/tags/MySQL/"},{"name":"Tomcat7","slug":"Tomcat7","permalink":"https://www.wistbean.com/tags/Tomcat7/"},{"name":"JDK","slug":"JDK","permalink":"https://www.wistbean.com/tags/JDK/"},{"name":"postman","slug":"postman","permalink":"https://www.wistbean.com/tags/postman/"},{"name":"sqlyog","slug":"sqlyog","permalink":"https://www.wistbean.com/tags/sqlyog/"}]},{"title":"现在已经不像父母那个年代了,花钱也是一种学问","date":"2018-09-08T18:17:24.000Z","path":"spend-money.html","text":"读书那会的兼职体会给大家说下我在读书那会，农村孩子嘛，再加上自己性格要强，不到万不得已，不会跟家人要钱，所以打过暑假工，做过兼职，那会做过快餐店的服务生，还做过厂工，那会说是体验生活，社会实践，其实还不是为了点钱（一不小心又说大实话了）。 我真的不相信有人去打暑假工或者兼职啥的单纯是为了社会实践。 在做快餐店服务员的时候，我那会除了厨师该干的事没干过之外，其它的诸如洗碗盘，擦桌子，端盘，给顾客加菜，帮忙打包，导购，拖地，擦玻璃等等都干了个遍。 还好，现在知道这些也不晚 还记得有一次用蹩脚的英文给国外的友人介绍菜品，没想到我的小学生英语水平他们居然听懂了，现在的那句「chinese tofu」还回荡在耳边。 那时候的我仅仅是为了点钱，买点自己喜欢的东西。不过那会也有点体会，发了条朋友圈： 「站久了就会觉得坐着好舒服，饿久了就会发现吃着好享受，困久了就会知道睡着很美好。。很多未满足后的满足，便是幸福！」 感觉这特么可以作为 Hiphop 歌词了哈。 再说下在做厂工的时候，我直接住到工厂提供的宿舍去了，那段时间睡眠质量特好，吃饭特香，因为每天都累得半死，每天在那里焊电路板，装螺丝，还在流水线做了点包装。每天的生活就是：吃饭-干活-打卡-吃饭-干活-打卡-睡觉。 不过当时有一个没想到的体验，就是那会跟我同一个宿舍的是一个社会人，他之前开酒吧的，他说有几张桌子是给警察留的，有几张桌子是给黑社会的人留着的，真正赚钱的也是其它的几张桌子上的普通客户，有一回他跟别人打架被人用钢管捅了肚子，他肚子有几个洞，有时候看的我想用手指去戳他的肚子。 后来我跟他成为挺好的朋友，虽然他离婚了，但是他很想念自己的女儿，常常会拿手机上的照片给我看。和其它员工不同，他是个见过世面的人，也是个有文化的人，晚上没出去喝酒的话会在宿舍看书，时不时回来还会买饮料给我喝，人很nice。以后有时间在说下那会跟他的相处经历，挺有意思的。 那会我除了想挣点钱之外，算是有一点切实的体会吧，主要是看到了那些工人，他们真的习惯了，每天都这样苟且，那段时间看着他们我觉得有点可怕，所以我真的回去之后拿起书本，努力了起来，很怕跟他们一样。 那些员工，他们每天像个机器人重复的做着同样的事情，他们知道如果今天不干，就没有钱，甚至可能被炒，即使活得没了自己，他们也觉得这就是生活，他们的认知就这样了，眼界就这么低了。 这都是我读书那会真实的经历，那会的我实在 too simple，总觉得有的吃有的喝就行了。 观念上的一些改变随着这些年的成长，我发现我变了许多，也比以前努力了许多，我读了些书，而且最近又赶上了付费的时代，我做些项目获得的报酬不再像以前去沐足按摩啥的了，我拿出一些费用去付费加入一些大佬的社群，努力的和他们建立连接，我从他们的身上学到了很多，这真的是对自己最好的投资。 想想在以前，当你什么都没有的时候，那些大佬哪有时间去鸟你？但是现在不同了，你能通过付费加入大佬的社区，0距离的接触，跟着大佬一起学习成长。有些人不会算账，平常吃喝拉撒的花费大手大脚，一旦到了加入付费社区就畏手畏脚了。 跟他们混多了，我渐渐发现我在其中被潜移默化的转变了一些认知，一些思维，一些观念。 我以前的观念是「凑合就好」，现在的观念是「尽量最好」。 比如现在如果我要买手机或者电脑，我会尽量选择在我承受范围之内，买最好的。能买 128G 的就不买 64G 的。 比如租房，能让我住的舒服，多花点钱不算什么。现在钱真的不是省出来的。 比如宽带，能买 200M 的就不买 100M 的，多花点钱，但是我不用忍受网络的卡顿，不用浪费这些时间，还影响了心情。 举这几个例子我想说的是：以前的我就是那么不会算账，我会觉得凑合就行，没必要，但现在不同了，花钱也是一种学问，现在已经不像父母那个年代了，现在钱不是省出来的了，节省时间才是正确的方式。 眼界要提高，格局要大。还好，现在知道这些也不晚。 同样的道理，如果你觉得在城市打拼多久也买不上房子，干脆回老家种种花草，做点小买卖，那么你这一辈子也就在那里卖假货，跟认知低的人一起混，就那样了。不是吗？","tags":[{"name":"个人提升","slug":"个人提升","permalink":"https://www.wistbean.com/tags/个人提升/"},{"name":"关于wistbean","slug":"关于wistbean","permalink":"https://www.wistbean.com/tags/关于wistbean/"},{"name":"认知","slug":"认知","permalink":"https://www.wistbean.com/tags/认知/"}]},{"title":"为什么要搭建一个属于自己的个人网站","date":"2018-09-06T17:45:26.000Z","path":"why-do-we-need-to-build-a-website.html","text":"个人网站搭建教程hexo搭建个人网站博客完全教程 肯定会电台相关肯定会电台肯定会电台RSS订阅","tags":[{"name":"互联网","slug":"互联网","permalink":"https://www.wistbean.com/tags/互联网/"},{"name":"肯定会电台","slug":"肯定会电台","permalink":"https://www.wistbean.com/tags/肯定会电台/"},{"name":"个人网站","slug":"个人网站","permalink":"https://www.wistbean.com/tags/个人网站/"}]},{"title":"Java初学者的学习路线","date":"2018-09-04T12:33:41.000Z","path":"lean-java.html","text":"学习Java之初我是大学的时候才开始接触编程的，不过我上的是一所三流的大学，高三的时候，因为我们班是重点班，所以有一些复读生也来我们班学习，高三开始不久我就和一个高四的学姐谈恋爱了，还是我的初恋，所以我高考就GG了… 偏题了，回来说说编程的事情吧，虽然说大学是个三流的学校，不过老师都是博士硕士级别的工程师，对于当时的我会觉得他们好像很厉害的样子，不过现在觉得有时候标签这种东西并不能说明什么吧。 那时候老师说「移动应用开发」会火，到时毕业一定可以找到工作，所以我就想着主攻「移动应用开发」，也就是 Android ，因为 Android 的应用层是用 java 写的，所以一开始学的是「java基础」。 虽然说去上课，但是真正听老师讲课的人寥寥无几，我也不例外，电脑前演示着老师讲课的PPT，但是视线一直停留在自己手机里的美女上。 不过有一次老师讲到一个「使用for循环打印星星的例子」，我觉得好好玩，这时候我才发现java并非那么无聊，我可以通过代码写出打印多少颗星星，打印成正三角形的形状，倒三角形的形状，正方形形状等等。第一次有了一种「有想法可以被java实现的感觉」，从那天起开始对编程产生了兴趣。 那一天虽然知道了「for循环」怎么写（跟着老师的例子照猫画虎），但是对于java环境变量怎么配置，二进制是什么，什么是Byte，Long都不懂，那时候可以说对于 java 只知道怎么拼写而已。 因为有些知识点之前没认真听，也发觉老师讲的很无聊，后来我决定自学，自我驱动的学习和被动的学习是两个完全不同的概念，我到现在依然认为：真正牛逼的人，都是自学能力极强的人！ 自学Java基础我开始上网查询学习「java基础知识」的资料，无意间发现了某培训机构（是哪个机构就不说了，免得说我打广告）有免费的讲课视频资料，看了一下目录发现很全面，于是我下载下来试着看一下，没想到被讲师的幽默讲课方式深深吸引，感觉他不做相声演员都可惜了，于是边笑着看他的视频，边跟着他敲代码，自己也做一些笔记。那段时间有时候逃课其实是在宿舍里看他的视频哈哈！ 那个视频课时分为三十来天，不过我是除了跟着他敲代码外，我还会自己做一些笔记，所以我大概花了两个多月才把视频学完的，也就这几个月的时间我从如何打印Hello World，到常量，变量，注释，运算，逻辑语句，再到面向对象（可能比较笨，当时想了好几天才明白这一概念），数组，函数，继承，内部类，多态，GUI等，再到集合，多线程，IO流，反射等等有一个全面的了解了。 感觉自己把 java 比较基础的知识学的差不多了，就想着能不能做点好玩的东西出来，记得有一个情人节，那时候我还是有女朋友的人，想给女朋友做一个程序，作为礼物送给她，有那么一个夜晚，我突然想到能不能用 java 做一款小游戏，游戏的主角就是她呢？ 想想还是有点激动的，后来我模仿了「坦克游戏」，不过玩家的坦克是我女票的头像，而很多敌方坦克就是我的头像，然后子弹被我改成❤️（爱心子弹，害羞）。 用了几天的时间把它做出来觉得好有成就感，最后我把这个游戏打成jar包送给我女票当作礼物，然后看她玩的时候一直在互相发射爱心，不过敌方的“我”又多，射出的爱心子弹又快,每次玩不久她就“挂”了，老是叫我去修改一下游戏速度，让她赢哈哈。不过现在的她已经不属于我了，哎，想想还是有点小伤感呢，我是不是又跑题了 - - 因为我一开始就知道我学 java基础 是为了去开发 Android 应用，那时候觉得能在手机上把玩自己开发的 APP 是一种牛逼的存在。所以我又去找了一些「Android入门教程」的视频来学习，因为自己有了一定的 java基础知识 ，所以对「Android入门教程」视频学起来倒不觉得很难，反而是想着快点学完然后做个有意思的APP出来，所以那时候对Activity，Service的生命周期、一些诸如TextView，EditView基础的组件、诸如LinearLayout的容器组件、广播、Intent、内容提供者消费者、Sqlite等基础内容都学的比较认真。 慢慢的我开始写了一些demo，但是发现很不满意，原因是我感觉自己写的东西很简单，几个界面跳来跳去，几个增删改查，好像就没什么了，感觉自己没有什么项目经验，而且停留在很基础的层面。 于是我上网去搜索一些Android相关的资料，发现了CSDN上的「郭霖」大佬，发现他写的博客通俗易懂，那时候他每篇博客我都看，慢慢的我又认识到了「老罗」，他写的东西很深，有时候我看不懂 - -，发现了「阮一峰」的博客，再到后来我又发现在知乎上的 「stormzhang」， 我这才发现当时自己有多low，这些大佬们经验满满，我从他们身上学到了自定义View，性能优化，网络编程，第三方框架等等比较进阶的东西，不过更加让我学习到的是他们的执行力，他们的认知，他们对信息的敏感。 举个例子：记得 Android Studio 刚出来那会，我只是觉得 Android Studio 应该和 Eclipse 差不多吧，不就是个编辑器，而且Android Studio 刚出来的时候我下载体验了一下卡的要死，我二话不说就把它给卸载了，什么垃圾玩意。不过后来我发现大佬们都在用 Android Studio ，而且一直在建议更换为Android Studio，我记得之前大佬们还专门写了Android Studio的教程。受他们的影响，我把Android Studio下载回来，随着Android Studio的迭代，我才发现这编辑器简直了，这快捷键，这体验，简直完爆 Eclipse。现在还看到有些人还用Eclipse开发，没用过Android Studio或者InteliJ IDEA，说实话，我面试到这样的人一般会直接pass掉，并不是说Eclipse不好，而是认为，如果不拥抱新的事物，总是固步自封，那么很快会被淘汰！ 也是那个时候，我发现了原来还有一个叫做「GitHub」的东西，简直打开了新天地，上面有许多大牛分享代码，聚集了全世界的程序员，吓得我赶紧去学习了Git的操作命令，clone了几个觉得适合我当时学习的Android项目源码！ 后来和朋友参加软件杯比赛，能写出比较像样的APP了，看着APP从想法到实现，确实能带来很多成就感，也许对别人来说并不完美，但是自己亲手写出来的，自己debug出来的APP，就是有不一样的感觉，觉得像自己的孩子一样哈哈！ 在大学期间，自己用PS画UI，使用第三方的接口，琢磨着做了几个小众的APP，后来将这些APP都装在自己的手机上，面试的时候一边演示一边跟面试官吹吹牛逼，倒也拿了几个实习offer。 开始用Java工作后来自己选了初创公司，刚开始就让我接手一个比较大的项目，功能挺多的，商品上下架，第三方支付，商家入驻，到后来甚至还做了附近的人，聊天约炮交友，抽奖等功能，我和另一个小伙伴负责这个项目的Android端，虽然期间遇到了许多问题，如代码混淆打包闪退，不同手机兼容适配，支付配置不正确等等，也曾怀疑自己是不是能行过，但还是一一解决了，前前后后花了快一年时间也在应用市场上架了好几版，不过用户寥寥，可能你应该想到了，产品还没运营，就夭折了。现在回头想想，产品思维确实重要。 接着也做了几款别的APP，表现也是平平 - - 可能因为表现的还行，后来老大说有个公众号的小项目，后端让我来搞怎么样，当时自己也发现原生APP的开发趋势下降了，H5 越来越火，然后跟老大说给我三天熟悉一下 java 后端的，他说没问题，没想到这一决定让我开始转向后端开发了… Java后端开发其实这三天主要研究了下 JSP , Servlet ,还看了点 struts2 框架，然后也算按计划时间倒腾出来了那个小项目，也是因为这个小项目我对后端开发产生了些许兴趣，我觉得写逻辑接口提供给前端调用好像比较牛逼。 那段时间开始研究 SSH2 框架，使用它做了一个电商项目，接着发现很少人用 SSH2 了，然后研究了 SpringMVC 框架，JDBCTemplate，进一步学习 Mysql的索引、视图，使用 PowerDesigner 设计数据库，Nginx，Linux操作系统环境搭建，操作命令，网络协议等等。 不过之前做的很少涉及到高并发，后来比较流行SSM框架了，也使用过它来做一些分布式的项目，慢慢的了解到了连接池、消息队列、定时、缓存、搜索引擎、渲染模板引擎等等。 由于SSM配置繁琐，现在Spring Boot/Spring Cloud这样的高效框架也越来越多人开始使用了。 越往后越发现基础的东西很重要，比如多线程的同步异步，各种集合的实现原理，面向对象，反射技术等！ 当然我非常不推崇那些对刚入门想学的同学推荐一堆诸如：各种设计模式，JVM调优，负载均衡，各种数据结构和算法，链表、排序树，分布式存储，对象池，连接池，网络三次握手过程等等。 人家还没开始学，就给吓跑了 - - 给新手自学 Java 的建议所以我建议「java自学入门」先从基础开始，再进阶到会使用各种框架，再慢慢了解其原理，加以项目辅助练习，最后再回来补充自己的弱项例如操作系统，数据结构，算法，网络！ 列个大纲吧： 初级入门知识点： 基本的语法 数组 面向对象 IDEA工具使用，相信我，别用eclipse了！ 常见对象的使用 集合框架 IO流 多线程 GUI（可选） java网络编程 反射 《疯狂java讲义》类似书籍或视频教程 进阶知识点： 《Effective java》类似书籍 数据序列化 JSON 项目构建管理 Maven 托管利器 Git Spring 容器 Spring MVC框架 安全框架 Shiro ORM框架 MyBatis 数据库连接池 模板引擎 分布式缓存数据库 Redis 分布式全文搜索引擎 Solr 任务调度框架 Quartz 消息队列 MQ 日志组件 Log4J 分布式服务框架 Dubbo 分布式协调服务 ZooKeeper 微服务 Spring boot 、 Spring Clound 完善知识点： 《深入分析java Web技术内幕》类似书籍 JVM NIO 设计模式 Linux操作系统 数据结构 算法 计算机网络 数据库优化 我相信一个人去关注这一问题，或者看到这里，都是有一颗学习的心，不过很多人被所谓的过来人扔一堆「晦涩难懂的技术名词」吓到，我是非常讨厌这样的人的，自以为很牛逼，摧毁初学者的信心， 凸！ 建议入门的童鞋可以先看视频教程，因为有老师在演示会比较好理解，记得总结，总结很重要！还有一点就是不要加入所谓的java开发讨论群，java学习群，因为十个有九个是在里面瞎逼逼，开车的！还有一点就是尽量使用Google。 希望以上的内容能给你带来帮助。 相关文章 编程人生中的两个小经验 Categories: Java Java初学者的学习路线建议","tags":[{"name":"Java","slug":"Java","permalink":"https://www.wistbean.com/tags/Java/"},{"name":"个人经验","slug":"个人经验","permalink":"https://www.wistbean.com/tags/个人经验/"},{"name":"Java初学者","slug":"Java初学者","permalink":"https://www.wistbean.com/tags/Java初学者/"}]},{"title":"使用Payoneer将Paypal金额提现人民币到银行卡","date":"2018-09-02T06:39:37.000Z","path":"paypal-withdrawing-rmb.html","text":"Paypal 现在的提现人民币方式可能有些人做境外电商，或者和我一样通过互联网赚钱的 9 种渠道,在一些国外的平台获取到的收入一般会存放到Paypal中，所以我们需要将钱提现到国内的银行来。 之前使用 Paypal 和 连连支付 合作的快捷人民币提现服务已经在2018年7月1日截止了，也就是说，中国的 PayPal 用户只可以通过电汇的方式以美金形式提现至中国的银行账户。 Paypal和连连支付截止 然而，手续费相当高，每次提现就要 35刀 ，而且整个过程时间挺长，也挺麻烦的。 有时候转到国内银行入账失败会被打回 PayPal ，35 刀的手续费也就不翼而飞，想想就蛋疼。 Paypal提现方式 Payoneer的全球收款的账户后来我了解到了Payoneer，在这里注册后平台会给你一个全球收款的账户，相当于拥有了一张全球的银行卡，我们知道，Paypal 提现美金是完全免费的，所以我们可以通过payoneer来接收 Paypal 的提现资金，然后再从Payoneer里面把钱转到我们的国内的银行账户。只需要 1.2% 的手续费，而且据说通过这种方式可以不占用外汇额度（每个中国公民每年只可以有 5w 美元的外汇额度）。 Payoneer 通过Payoneer来提现paypal人民币那么接下来就说说怎么操作。 注册Payoneer如果你之前没有注册过Payoneer，可以通过这里Payoneer官网进行注册，通过这里进入注册的，当你获得总共 $1000 的支付后，可以获取一笔 $25 的奖励。 获取全球银行账户当你注册完毕之后，在收款菜单下有个 「Global Payment Service」： Global Payment Service USD 下的这个银行账户就是专门用来收美元的，一般 Payonner 给你签发的美元收款账户的银行是 「First Century Bank」： First Century Bank 在 Paypal 关联 Payonner 银行账户在你的 Paypal 中，点击「资金」，选择「关联新的银行账户」： 在 Paypal 关联 Payonner 银行账户 将你在Payonner的美元收款账户信息录入： 在 Paypal 关联 Payonner 银行账户 可能有些朋友在这里无法通过，那么需要在 Payonner 申请一个 「Community Federal Savings Bank」的美元收款账户。 可以找Payonner客服,跟她说给你的账户签发一个社区联邦储蓄银行账户(Community Federal SavingsBank)的帐户。 或者在线申请签发,点击这里：https://wj.qq.com/s/2580735/bb88 信息没必要写的多认真，主要是在填写你的用户 id 别写错就行。 一般过个一两天就会给你的账户签发多了一个账户了，我等了一天就给我签发了： Community Federal Savings Bank 拿到了自己的「Community Federal Savings Bank」 账户就可以关联到 Paypal 了。这里的信息填写如下： 国家或地区 ： 美国 银行名称： Community Federal Savings Bank 账户类型 ： 支票账户 银行代号 ： 你 Community Federal Savings Bank 下的 路由（ABA） 账号： 你 Community Federal Savings Bank 下的 账号 Paypal关联账户 接着需要验证一下你的验证码： Paypal验证 Paypal验证 Paypal提现到Payonner在 Paypal 中成功绑定了 Payonner 之后呢，就可以提现啦： 在资金下点击提现 选择刚刚关联的Payonner收款账户 Paypal提现到Payonner Paypal成功提现 提现的过程中，Payonner会给你发送邮件，要求你认证你的个人信息，如实填写就好了： 填写调查文件 提供信息 上传身份证 详细信息 等待个两三天左右，你的Payonner就会到账了： Payonner到账 Payonner 提现到国内的银行在你的 Payonner 选择提款到银行账户，如果你还没关联自己的银行就先在Payonner里面绑定你的银行卡，然后就可以提款了。 提款到银行账户 输入金额 提款 等它个三到五天 ok，以上，就完成了Paypal提现人民币，不仅拥有了自己的全球银行账户，还可以轻松提现到Paypal的钱，还省下了Paypal 35刀的手续费。 相关文章 PayPal 快捷人民币提现服务终止通知 Paypal美金提现人民币有什么快捷到账的方式？ payoneer收款博客","tags":[{"name":"互联网","slug":"互联网","permalink":"https://www.wistbean.com/tags/互联网/"},{"name":"个人理财","slug":"个人理财","permalink":"https://www.wistbean.com/tags/个人理财/"},{"name":"赚钱","slug":"赚钱","permalink":"https://www.wistbean.com/tags/赚钱/"},{"name":"Paypal","slug":"Paypal","permalink":"https://www.wistbean.com/tags/Paypal/"},{"name":"Payoneer","slug":"Payoneer","permalink":"https://www.wistbean.com/tags/Payoneer/"}]},{"title":"python3入门基础有趣的教程","date":"2018-09-01T09:07:44.000Z","path":"python-tutorial.html","text":"pick up Python给大家说一下，我要开始学习 Python 了， Python 最近很火嘛（小样，别太膨胀），不过还好我是个程序员，只不过之前玩的不是 Python 语言，所以接下来我要 pick up Python了。是的，没错，pick up，以后你告诉别人说你要学 python，你可以很装逼的告诉他：“老子要pick up Python了！” ![人生苦短，我特么要pick up Python而这里呢，和其它的学习 Python 的号不一样，不会乱七八糟，我会形成一个体系，也就是 Python 从0到1的整个体系，而且我也不想严肃，我要让我的这个教程呢，看起来好笑，好笑之中又能真正的学到Python的精髓，所以我会下功夫去学习，去消化，然后再转化成风趣幽默的文章，让大家看起来像看小黄文一样轻松，这是我想做的事情。![听到小黄文，想想还有点鸡动呢 (你可别乱来啊！)](http://owx1uvd7t.bkt.clouddn.com/py2.png)## 为什么要学 Python对了，还没告诉你为什么要学 Python 呢，我来说说这几点就已经足够：![Python](http://owx1uvd7t.bkt.clouddn.com/py3.png)1. 现在 Python 已经成为世界上最流行的编程语言之一了，而且大部分的Linux系统，MacOS系统都直接内置了 Python ，就问你牛逼不？2. 现在连小学生都开始学习 Python 了，Python 已经纳入了某地区小学的教材了。Pyhon 已然成为了编程界的 “网红”，现在程序员们可能不知道Cobol，Basic，Pascal，Perl，Ruby，但没有一个程序员不知道Python的。3. 上手简单，现在很多从来没接触过编程的人都着手开始学习Python 了，我有一朋友，之前没有任何编程基础，学了半年多找到了份工作，工资12k妥妥的，不过不要去羡慕别人的数字，人家背后的努力你没看到而已，如果你现在也是没有任何基础或者想要从0学习 Python ，那么你来对地方了！因为人生苦短，我们一起搞 Python。4. web开发，科学计算，3D建模，人工智能，嵌入式开发，云计算，大数据等等都特么能看到Python的身影，不知道你知不知道NASA（美国宇航局）使用Python来开发用于系统集成和卫星，火箭的测试自动化么？还有网易，腾讯，搜狐，金山，豆瓣，YouTube ，google，雅虎（太多，举例不完）都在用Python。所以这么牛逼，何不 pick up python 呢？5. 用 Python 可以做很多事情，可以爬取你想要的数据，可以做外挂，之前的微信跳一跳，12306抢票等都可以用Python实现，还有很多数据分析，项目系统，聊天系统，游戏等等多了去了。所以这么牛逼，何不 pick up Python 呢？![是不是真的啊？又想骗我学习~](http://owx1uvd7t.bkt.clouddn.com/py5.jpg)不妨再来看下[Python官网](https://www.python.org/)的介绍，**他说这些是使用Python的人宁愿不使用其他任何东西的一些原因**：![python](http://owx1uvd7t.bkt.clouddn.com/py6.jpg)1. Pyhon很牛逼...而且很快；2. 可以和别人一起P；3. 在哪都可以搞；4. 非常友好&amp;学习简单；5. 开放。![好棒！我要pick up Python了，接下来将是学习python的正确势！](http://owx1uvd7t.bkt.clouddn.com/py7.jpg)## 别怕，Python 不是蟒蛇PS：虽然 Python 的中文意思是「蟒蛇」，但是 Python 语言的创造者 Guido van Rossum 是因为超喜欢英国广播公司的节目「蟒蛇飞行马戏」而命名这个语言的，所以你可别以为Python 创造者是个喜欢蟒蛇的怪叔叔。![python 创始人](http://owx1uvd7t.bkt.clouddn.com/py8.jpg)# Python : Hello World !不管学什么编程语言，在一开始入门的时候，都会从「Hello Wrold」开始，这已经成为编程界的不成文规定。在1972年的时候，有个叫科比 布莱恩的人使用B语言撰写了第一个使用参数的 Hello World 相关程序。说明一下：此科比非彼科比，这哥们当然不是我的那位打NBA的偶像啊！![如果科比不打NBA而去编程，会是怎么样呢？](http://owx1uvd7t.bkt.clouddn.com/py5.jpg)![科比：你们给我悠着点！！](http://owx1uvd7t.bkt.clouddn.com/py2.1.jpg)看下图！这就是由 科比 布莱恩 撰写的「Hello Wrold」程序：![Hello Wrold](http://owx1uvd7t.bkt.clouddn.com/py2.2.jpg)自此，Hello World 成为了计算机程序员学习新的编程语言的传统美德！![当然说到传统美德，尊老爱幼也是必须的。其实我现在发现大多数年轻人素质都比较高，反而是那些年长的老人，倚老卖老，所以以后问路尽量找年轻人。](http://owx1uvd7t.bkt.clouddn.com/py5.jpg)那么，我们学习 Python 也从「Hello World」开始吧！## 安装 Python如果你用的 Mac 或者 Linux 的话，那么你就不需要安装了，因为系统已经内置 Python 了，如果是 Windows 系统的话，安装也很简单，比安装 LOL 英雄联盟还简单。所以我相信不用我说，你也知道怎么安装，如果你连软件都不会安装，那么可以不用关注我了。![说的好屌啊，不知道是不是真的？](http://owx1uvd7t.bkt.clouddn.com/py5.jpg)你可以直接访问 [Python 的官网](http://www.python.org) 下载最新的版本。![下载 python](http://owx1uvd7t.bkt.clouddn.com/py2.3.jpg)在这里告诉一下完全没经验的朋友们，千万不要去百度搜索 python 下载，然后去到类似这样的地方下载：![别在这里下载 python](http://owx1uvd7t.bkt.clouddn.com/py2.4.png)因为这样做**很容易被人骂傻逼的**。![听说现在骂百度是一种正确的价值观！](http://owx1uvd7t.bkt.clouddn.com/py5.jpg)## 开始玩耍已经安装好Python之后呢，你可以在命令行里面输入「python」，然后你就会看到这样的东东：![python 版本](http://owx1uvd7t.bkt.clouddn.com/py2.5.png)有没有看到三道杠杠 「 &gt;&gt;&gt;」。是不是突然想到小学的时候，那些受老师爱戴，学生中的好榜样的队长袖口上的三道杠！![三道杠，怕不怕](http://owx1uvd7t.bkt.clouddn.com/py2.6.jpg)![大队长和大队委，牛逼牛逼，社会社会。](http://owx1uvd7t.bkt.clouddn.com/py2.7.jpg)不过在 Python 这里呢， &gt;&gt;&gt; 是一个提示符来的，也就是在它后面可以输入一些内容，更确切的说，**这是交互式Pyhon解释器接收内容的符号**。比如我们要 Python 给我们打印 Hello World 的字样，那么你就可以这样子：在 &quot;三道杠&quot; 后面输入 print (&quot;Hello World&quot;) , 然后用力按一下回车键，你就可以看到 Python 解释器打印出 Hello World 这样的字符串了：![Hello World ](http://owx1uvd7t.bkt.clouddn.com/py2.8.png)当然仅仅是打印 Hello World 你可能觉得没什么牛逼的，但是这不是才入门么，想要做更多有趣的事情么？跟着我一步一步来！# Pythoner ：挑选一个Python编辑器各位 Pythoner 好啊！在这个烦躁的时代，相聚就是缘分，很高兴各位 Pythoner 能相聚于此，希望接下来的路，我们一起走下去，使用 Python 来做一些有趣的事情，有意义的事情。我们在玩游戏的时候，我们通过层层努力的打怪升级，为的是什么？是女人么？是金钱么？ 当然不是，我们有那么肤浅么？我们为了能够拥有更牛逼的装备。![老话说的好：工欲善其事必先利其器！你的武器越牛逼，你的女人就越能够对你服服帖帖的。](http://owx1uvd7t.bkt.clouddn.com/py3-1.jpg)所以，我们在使用 Python 来编程的时候，我们也需要一个牛逼的武器，来编写我们的代码 —— 编辑器！在这里跟大家说一下现在市面上比较主流的 Python 编辑器供你参考，要知道，适合自己的才是好的。如果你的丁丁很小，使用再大 size 的套套也是白搭！## Sublime Text![Sublime Text](http://owx1uvd7t.bkt.clouddn.com/py3-2.jpg)[Sublime Text](https://www.sublimetext.com/) 比较适合 Python 新手使用，Sublime Text支持跨平台，而且可以使用其丰富的插件和主题。各种语法高亮和代码补全，整体看起来挺舒服的，而且主题配置起来也不难。## IDLE![IDLE](http://owx1uvd7t.bkt.clouddn.com/py3-3.png)如果你是 Windows 系统可以使用 [IDLE](https://docs.python.org/3/library/idle.html), 它是 Pyhton 自带的一款编辑器，所以刚开始也可以使用它来玩玩，IDLE具备语法高亮功能，还允许你在IDLE中运行你的程序。许多事情它会自动帮你处理。比如debug什么的。## VIM![VIM](http://owx1uvd7t.bkt.clouddn.com/py3-4.jpg)[Vim](https://www.vim.org/)是一款强大的编辑器，如果你熟练使用 Vim 的话，那么你完全可以脱离鼠标，双手在键盘上像弹钢琴那般酸爽，不过 Vim 需要一定的学习成本，需要花点时间去研究一下各种快捷命令和插件的使用，但是从长远来看，这都是大有所益的。## PyCharm![PyCharm](http://owx1uvd7t.bkt.clouddn.com/py3-5.jpg)我个人比较中意这个，如果你使用过 [IntelliJ IDEA](https://www.jetbrains.com/idea/) 的话，你应该会对其爱不释手，而这款 PyCharm 也是出自同一家公司，用起来会很顺手，现在很多公司，如Twitter，Groupon，Spotify，eBay和Telefonica等都在用 PyCharm 。不过你使用它的专业版需要花钱购买。## Emacs![Emacs](http://owx1uvd7t.bkt.clouddn.com/py3-6.jpg)[Emacs](https://www.gnu.org/s/emacs/) 在 python 开发界也很受欢迎，它是一款开源的编辑器，支持插件扩展，可以配置一个 python 集成开发环境， Emacs 不仅仅是一个编辑器，他是一个整合环境，可以说是一个集成开发环境。ok，就推荐这几个市面上比较流行的编辑器，当然还有其他的编辑器，最适合自己的才是最好的，用起来顺手不尴尬才爽嘛~在这里给点建议就是新手可以先上手使用 IDLE 和 Sublime Text ，Vim是一款强大的编辑器，没事花点时间研究下，相信我，真的会受益匪浅的。# 自己写一个 Say Hello 的 python 程序是不是觉得我特么才安装了 Python 软件，这么快我就可以写出 python 程序了？先别怀疑着先，一开始我就说了，Python语言简单，上手快，所以你跟着我呢，一步一步来，准没错的。![又他妈的不要脸了！](http://owx1uvd7t.bkt.clouddn.com/py4-1.jpg)通过 [Pythoner ：挑选一个Python编辑器](https://www.wistbean.com/2018/09/01/python-tutorial/#Pythoner-%EF%BC%9A%E6%8C%91%E9%80%89%E4%B8%80%E4%B8%AAPython%E7%BC%96%E8%BE%91%E5%99%A8)相信你已经知道使用什么样的编辑器了，因为这里力求从0到1，做一个完整 python 的体系，所以现在就先用 IDLE 这个编辑器，到时候你越来越牛逼了，咱们再换编辑器，没毛病。![好了，别废话了，快点带我写程序啊！](http://owx1uvd7t.bkt.clouddn.com/py5.jpg)## 这个Python程序可以干嘛首先我们来想一下我们这个 Python 程序可以干嘛？1. 可以让我们输入名字；2. 可以跟我们输入的这个名字say Hello！ok，我们要达到以上的功能，咱们说干就干！## 开始编写第一个python小程序打开我们的编辑器：![IDLE编辑器](http://owx1uvd7t.bkt.clouddn.com/py4-3.jpg)现在的它是处于交互式解释器的状态，如果我们现在在这个交互解释器编写代码，那等下关掉所有的代码就不见了，我们当然是想要能够写出一个自己和别人都能够运行的程序，怎么能说代码丢掉就丢掉呢？![我的小九九都被你发现了，是不是我的pp一抬，你就知道我是要拉尿还是拉shit。](http://owx1uvd7t.bkt.clouddn.com/py5.jpg)那么我们就使用快捷键「Ctrl + N」来新建一个编辑窗口，可以看到这里没有「三道杠」提示符了吧，我们在这里写的代码待会可以保存，爱在哪里运行就哪里运行。![IDLE编辑器](http://owx1uvd7t.bkt.clouddn.com/py4-5.jpg)我们刚刚说了，想要这个程序可以让我们输入名字，那么我们可以用一个叫做 name 的变量来接收别人输入名字，可能你现在不知道变量是什么鬼，但是没关系，你现在把它理解为是一个桶，这个桶可以来存放用户输入的名字就好了，往后我会告诉你变量的使用，别急，咱们慢慢来。ok，那么我们就可以写我们的第一行代码了：``` pythonname = input (&quot;你他妈叫什么玩意儿？&quot;)```解释一下这行代码的意思，input 是输入的意思，而「你他妈叫什么玩意儿？」就是显示给用户看的提示语。我们已经完成了第一点，也就是这个程序可以让我们输入名字，那么我们继续完成第二点，可以跟我们输入的这个名字say Hello！那么很简单，我们只要再写一行代码即可：``` python print(&quot;Hello&quot; + name)```解释一下这行代码的意思， print 就是打印的意思，你可以理解为信息的输出，我们已经知道 name 这个 &quot;桶&quot; 已经装了用户输入的名字，所以 &quot;Hello&quot; + name 就是会输出 Hello xxx！![IDLE编辑器](http://owx1uvd7t.bkt.clouddn.com/py4-6.png)ok，我们已经写完代码了，我们「Ctrl + S」保存一下文件到桌面，你可以把它命名为「Hello.py」。接着我们就可以来运行我们的程序了，在我们的 IDLE 中用力的按一下 F5 开始运行程序：![IDLE编辑器](http://owx1uvd7t.bkt.clouddn.com/py4-7.gif)![可以可以~](http://owx1uvd7t.bkt.clouddn.com/py4-8.jpg)看到木有，我们的程序完成了。是不是挺好玩的！慢慢来，我们到时就可以写游戏，写网站，写爬虫了，是不是想想还有点小激动呢？# 什么是常量，什么是变量？这两个概念很简单理解，以后我们在使用 Python 编程的时候也会经常用到。## 常量我们知道，世界杯踢球每队会派出 11 名队员出场比赛，这里的 11 是固定不变的。我们高中的时候学的物理有个叫做重力加速度的概念，它是 9.8 m/s²，这里的 9.8 也是一样是固定不变的，**对于这些固定不变的，具备字面上的意义的量我们就称为「常量」**，它就像一座高高的大山，不会被轻而易举的改变，愚公移山？不存在的。![愚公移山](http://owx1uvd7t.bkt.clouddn.com/py5-1.jpg)![愚公不畏艰难，坚持不懈，挖山不止，最终感动天帝而将山挪走的故事。通过愚公的坚持不懈与智叟的胆小怯懦，以及“愚”与“智”的对比告诉人们，无论遇到什么困难，只要有恒心、有毅力地做下去，就有可能成功。](http://owx1uvd7t.bkt.clouddn.com/py3-1.jpg)![这特么跟常量有毛关系？](http://owx1uvd7t.bkt.clouddn.com/py5-2.png)## 变量在[自己动手写一个会跟你 Say Hello 的 python 程序](https://www.wistbean.com/2018/09/01/python-tutorial/#%E8%87%AA%E5%B7%B1%E5%86%99%E4%B8%80%E4%B8%AA-Say-Hello-%E7%9A%84-python-%E7%A8%8B%E5%BA%8F)中我们就谈到了变量这个玩意，我说变量可以把它理解为一个「桶」，你可以通过它来存储一些变化的值。其实说白了变量只是你的计算机中存储信息的一部分内存，它可以存储所有可以变化的值。比如说你想要用「 i 」 来表示一个变量，对python来说是一件很简单的事，你只要用 「i = 变化的值」就可以了。举个例子：![python 变量](http://owx1uvd7t.bkt.clouddn.com/py5-3.jpg)这里使用 i 来表示一个变化的值 5，也就是说我们将 5 赋值给变量 i 。那么现在这个 i 指向的值就是 5 。所以这里的 i+6 就是 5+6。假如我们现在想让 i 来表示的值变成 2，这完全没问题，只要这样即可：![python 变量](http://owx1uvd7t.bkt.clouddn.com/py5-6.png)![男人能屈能伸，可长可短，算不算变量？](http://owx1uvd7t.bkt.clouddn.com/py5.jpg)注意了，Python中的变量名称只能**由字母、数字、下划线构成，而且不可以数字打头**，像「xiaoshuaib_520」这样的是合法的，但是如果是「520_xiaoshuaib」那是不可以的。不信你瞧：![python 变量](http://owx1uvd7t.bkt.clouddn.com/py5-5.png)# Python基本数据类型之「数」相信通过[什么是常量，什么是变量？](https://www.wistbean.com/python-tutorial.html#%E4%BB%80%E4%B9%88%E6%98%AF%E5%B8%B8%E9%87%8F%EF%BC%8C%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%98%E9%87%8F%EF%BC%9F)你已经知道了变量是个什么玩意了，变量可以来处理变化的值，而这些变化的值呢，是可以对其分门别类的，也就是说每个变化的值它是有专属的类型的，你可以理解为这个值打一个标签。在这里补充一点：Python 中的变量是不需要声明。每个变量在使用前都必须赋值，变量赋值以后这个变量才会被创建。比如说 i = 5 ，在这里并不需要去定义这个 i 的类型，例如「整数类型 i = 5」，我们只要直接把 5 赋值给 i 就可以了，赋值后这个变量 i 就被创建了。这时候我们就可以说变量 i 现在所指的是一个为「整数类型的值5」。![Python除了基本数据类型「数」之外，还别的基本类型例如字符串，我们也可以自己定义数据类型，这个往后讲。](http://owx1uvd7t.bkt.clouddn.com/py3-1.jpg)接下来就来说说 Python 中基础数据类型中的「数」。## 数在 Python 中的数有四种，分别是整数（int）、长整数（long）、浮点数（float）、复数（complex）。### 整数像 6 这样的数字就是整数，不带小数点的，而长整数只不过代表的是比较大一点的整数，现在 python3 中的整数（int）已经不限制数的大小限制了，所以整数类型也包括长整数。我们可以通过 Python 交互式解释器来运算整数：![python运算整数](http://owh7v964r.bkt.clouddn.com/py6-1.jpg)这里的 「6+6」没什么好说的吧，而 「6//2」就是6整除2的意思了，「1%2」的意思是说1除以2的余数，「%」有个专业名词叫做取余或者取模。而「2**3」就是2的三次方的意思。怎么样？简单吧！### 浮点数但是如果你试试 「1/2」，这时候你会发现结果有小数点：![python运算浮点数](http://owh7v964r.bkt.clouddn.com/py6-2.jpg)在这里的 「/」是除的意思，但是不会整除，你可以看到每次的结果都会有小数点。而这些像 「0.5」，「1.0」带有小数点的数我们就叫做浮点数。### 复数Python中的复数由实数部分和虚数部分组成。虚部的后缀为「j」。例如：4+5j 就是一个复数，实数部分为 4.0，虚数部分为 5.0。你可以把复数理解成为一个平面的一个点，例如上面这个例子你可以把它理解为平面上的点（4,5）。Python连复数都支持，你说它能不强大么？# 二进制八进制十六进制的快速转化## 二进制我们都知道，在计算机中，存储的数据都是像这样「010101010110010101...」的东东，这一串数字就是二进制。想想你家里的灯，是不是只有两种状态，一种是开灯，一种是关灯。![开关灯](http://owx1uvd7t.bkt.clouddn.com/py8-1.jpg)而我们的计算机在表示数据的时候也是按照这样的状态来表示的。也就是一开一关两个状态。我们把 0 当做关，把 1 当做开！![0有点像把锁，1有点像把钥匙！emmmm..](http://owx1uvd7t.bkt.clouddn.com/py8-2.jpg)但是现在想想啊，我们那么多数据，比如说一个 mp3 音乐，一部苍老师的教程视频，如果只让计算机仅仅以 0 和 1 这两种状态来表达这些数据，那是心有余而力不足的。那么怎么办呢？这时候国际标准化组织就决定了，不够用是吧，那么用 8 个这样的状态来表达一个数据！也就是：一个数据 = 01010101 （8个状态）那么这样的由8个状态组成的数据就叫做**字节**！不信的话你可以随便点开的桌面的文件，右键打开属性看看，是不是都会给你显示这个文件的大小都会用字节来表示：![文件的大小](http://owx1uvd7t.bkt.clouddn.com/py8-3.jpg)![你这小黄图能否图片分享一下？](http://owx1uvd7t.bkt.clouddn.com/py8-4.gif)所以知道以下的东东代表的是什么了吧： 1byte（字节）= 8bit（位，状态） 1kb = 1024byte 1mb = 1024kb 1g = 1024mb 1tb = 1024g## 二进制怎么转化成八进制？我们已经知道了一个字节需要8个二进制位来表示，有点长了，那么用八进制来表示的话就会短一点，比如说有怎么一个字节：0101101如果我们想把它变成 八进制 的话，那就从右到左，每三位当做一个，最左边的不够就补0。也就是说上面这个可以这样：000101101把每三位的整体转化成十进制的数，就变成八进制了。至于怎么转换，下面会说到。这时候用八进制就只用3个数就可以表示了。## 二进制怎么转化成十六进制？同理，十六进制可以用更少的位数来表示，如果我们想把0101101变成 十六进制 的话，那就从右到左，每四位当做一个，最左边的不够就补0。也就是说上面这个可以这样：00101101把每四位的整体转化成十进制的数，就变成十六进制了。至于这么转换，下面也会说到。这时候用十六进制就只用2个数就可以表示了。## 不同的进制表达方式二进制是由 「0,1」 组成，通常以 0b 开头。八进制是由 「0,1,2,3,4,5,6,7」 组成，以 0 开头。十进制是由 「0,1,2,3,4,5,6，7,8,9,0」 组成。十六进制是由 「0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f」 组成，以0x开头的。## 进制之间的相互转化在这里告诉大家一个进制之间快速转化的方法，当然，不是使用计算器啊 - -首先你只要记住以下对应关系即可：```1 1 1 1 1 1 1 1128 64 32 16 8 4 2 1```### 二进制转化为十进制那么如果告诉你一个二进制 如 0b11111111，转化成十进制，怎么做呢？把对应的数加起来就可以了。0b11111111 = 128+64+32+16+8+4+2+1 = 255看到 255 有没有一种熟悉的感觉？所以这时候再给你出道题，把 0b010110 转化成十进制你应该会了吧？0b010110 = 16 + 4 + 2 = 22### 十进制转化为二进制同样的：```1 1 1 1 1 1 1 1128 64 32 16 8 4 2 1```我们要把十进制如22，转为二进制就是：22之内16有没有？ 那么在16对应的地方就有1。![](http://owx1uvd7t.bkt.clouddn.com/8-1.png)22-16=6，那么8对应的就不存在了。![](http://owx1uvd7t.bkt.clouddn.com/8-2.png)6之内有4对吧，那么4对应的就有1，6-4=2，那么2也有，2-2=0，所以1就没了。![](http://owx1uvd7t.bkt.clouddn.com/8-3.png)所以最后的答案就是 22 = 0b10110。### 二进制转化为八进制我们已经知道了在二进制中每三位的十进制代表一个八进制位：000101101那么这时候只要把这个二进制拆成三份，每一份转化成十进制，再组合起来就是八进制了。000 = 0；101 = 4+1 = 5；101 = 4+1 = 5；所以二进制 0b000101101 = 八进制0055。### 二进制转化为十六进制我们已经知道了在二进制中每四位的十进制代表一个十六进制位：00101101那么这时候只要把这个二进制拆成两份，每一份转化成十进制，再组合起来就是十六进制了。0010 = 2；1101 = 8+4+1 = D；所以二进制 0b00101101 = 十六进制0x2D。ok，以上，其实说实话，如果不懂这个也不影响后面使用 Python 来编程，但是懂的多一些总归没有什么坏处。# 各种符号的意义及用法我们小时候，老师都教过我们 1+1=2 ，这个 「1+1」 就是表达式， 「+」 就是运算符。咱们接下来就来了解一下，在 python 中，那些运算符是什么意思，怎么用？ 相信看完，你就能够明白了。## 加减乘除(+-/*)对于 +-*/ 我们都知道它们是什么含义了吧，就算你的数学是体育老师教的，你也会懂加减乘除吧。不过有两个小细节值得你去注意，就是字符串之间的相加和相乘：![python运算浮点数](http://owx1uvd7t.bkt.clouddn.com/7-1.jpg)看懂是啥意思了么？字符串之间的相加会被&quot;拼接&quot;起来，而字符串和数字相乘就会重复多次相同的字符串。其它的大于、小于、大于等于、小于等于就不说了，因为我们小学老师都跟我们说过了。接下来说几个比较少见的符号。## 幂(**)幂就是以前我们学数学的时候老师讲的什么什么几次方，别一看到幂就想到杨幂。![杨幂](http://c1.yaofangwang.net/Common/Upload/guide/0/2e5d2989-a526-4aaa-b7cc-61e24e4ac8ea8928.jpg)用符号 `**` 表示， 比如 `2**3 = 8`。## 整除（//）我们知道 / 是除的意思，你知道 6/3 等于多少么？你可能会觉得在侮辱你的智商对不对，不是 2 么？ 在 python 中得出的结果是 2.0 ， 也就是它返回的是浮点数。 那么我们只想得到整数部分怎么玩呢？用 // 这个 ： 6//3 = 2。## 取模（%）取模的意思不是让你去获取个模特，是得到除法的余数，比如 8%5 = 3 ，因为 8/5 = 1余3。## 左移（&lt;&lt;）和右移(&gt;&gt;)移的意思就是把一个数的二进制移动多少个位。比如 2 &lt;&lt; 2 = 8 。这是为什么呢？首先 2 的 二进制 是 0b00000010 ，然后将它左移2位（虚位补0）就变成这样： 0b00001000 ，它对应的十进制就是 8 。同样的道理：8 &gt;&gt; 2 的意思就是将 8 的二进制向右移动2位：0b00001000 右移动2位：0b00000010 也就是对应十进制的 2。那么下次有人问你2*8怎么样写代码比较高效，你就直接甩给它： 2&lt;&lt;3 就好了。## 与（&amp;）记住一句话：&quot;同真与真&quot;，什么意思呢？ 比如 1&amp;1=1,1&amp;0=0,1就是真，0就是假。也就是只有 1&amp;1=1，其它的都等于0。那么 2 &amp; 3 怎么算？先将它们转化为二进制：2对应的二进制 ： 0b000000103对应的二进制 ： 0b00000011那么从右往左： 0&amp;1=0 ，1&amp;1=1，0&amp;0=0，所以结果为0b00000010，转化为十进制就是2，所以 2&amp;3=2。## 或（|）记住一句话：&quot;同假或假&quot;，什么意思呢？ 比如 1|1=1,0|0=0,1就是真，0就是假。也就是只有 0|0=0，其它的都等于1。那么 2 | 3 怎么算？先将它们转化为二进制：2对应的二进制 ： 0b000000103对应的二进制 ： 0b00000011那么从右往左： 0|1=1 ，1&amp;1=1，0&amp;0=0，所以结果为0b00000011，转化为十进制就是3，所以 2|3=3。## 异或（^）相同者假，不同者真，什么意思呢？就是 1^1=0, 1^0=1。那么 2^3 怎么算？先将它们转化为二进制：2对应的二进制 ： 0b000000103对应的二进制 ： 0b00000011那么从右往左： 0^1=1 ，1^1=0，0&amp;0=0，所以结果为0b00000001，转化为十进制就是1，所以 2^3=1。## 翻转（~）x的按位翻转就是是-(x+1)。那么 ~2 怎么算？~2 = -（2+1） ； 所以答案就是-3。ok，以上，其实没必要去记住，了解一下就这些符号是什么意思，怎么算的就好了。# Python基本数据类型之「字符串」## 单引号（&apos;）字符串把一段文本用单引号「&apos;」包围起来，它就变成了字符串，和数一样是一个值。比如：text = &apos;世界上最帅的人是wistbean&apos;这里的变量名就是text，而对应的值就是字符串「世界上最帅的人是wistbean」。## 双引号(&quot;)字符串把一段文本用双引号「&quot;」包围起来，它就变成了字符串，和数一样是一个值。比如：text = &quot;世界上最帅的人是wistbean&quot;这里的变量名就是text，而对应的值就是字符串「世界上最帅的人是wistbean」。![挖槽，这不是和单引号一样么？别特么逗我啊！](http://owx1uvd7t.bkt.clouddn.com/py9-1.webp)哈哈，是的，其实单引号的字符串和双引号的字符串是一样的，不过为什么Python要支持单引号又支持双引号呢？那是因为，有时候我们的文本里面，不一定就只用双引号或者单引号啊，比如说：&quot;包钟480，包夜1200&quot;，她说。这句话对于 Python 解释器来说，他只认识引号里面的内容，也就是说 python 只知道字符串「包钟480，包夜1200」，而后面的「，她说。」对于 Python 来说不认识。那么如果是这样的话：&apos;&quot;包钟480，包夜1200&quot;，她说。&apos;Python 就能懂！![](http://owx1uvd7t.bkt.clouddn.com/py9-2.webp)所以你应该理解为什么 Python 同时支持双引号和单引号了吧。![包夜太贵了，能不能便宜点啊？](http://owx1uvd7t.bkt.clouddn.com/py9-3.webp)## 三引号字符串（&apos;&apos;&apos;或者&quot;&quot;&quot;）这三引号是来干嘛的呢？如果你要表示一个很长很长的字符串，那么这个三引号就可以派上用场了，因为它支持跨多行，而且在这个三引号的字符串里面你要用单引号和双引号都无所谓。像这样：&quot;&quot;&quot; MM：&quot;噢，请你不要吻我&quot;MM：&quot;噢，请你不要吻&quot;MM：&quot;噢，请你不要&quot;MM：&quot;噢，请你不&quot;MM：&quot;噢，请你&quot;MM：&quot;噢，请&quot;MM：&quot;噢&quot; &quot;&quot;&quot;Python 是完全看得懂的。![](http://owx1uvd7t.bkt.clouddn.com/py9-4.webp)![我好像发现了什么不得了的事情！！！](http://owx1uvd7t.bkt.clouddn.com/py9-5.webp)## 转义可能你会对这样的字符串「&apos;&quot;包钟480，包夜1200&quot;，她说。&apos;」感到别扭，老子就想都用一种引号，不想要一下双引号一下单引号的行不行？![行行行，老子说什么就是什么！](http://owx1uvd7t.bkt.clouddn.com/py9-6.webp)那么这时候就可以用「转义」来解决，转义的符号是反斜杠「\\」。比如这句话「&apos;&quot;包钟480，包夜1200&quot;，她说。&apos;」我们通过转义可以变成这样：&apos; \\&apos;包钟480，包夜1200\\&apos;，她说。&apos;那么这个时候 Python 就能够看懂了， 现在这玩意「\\&apos;」在 Python 眼中就是「&apos;」。![](http://owx1uvd7t.bkt.clouddn.com/py9-7.webp)所以你可以把转义「\\」理解为是为了让 Python 看的到我们想要表达的东西。## 字符串的拼接有时候我们需要两段话拼接在一起，对于 Python 来说so easy，只要像两个数字一样相加即可。像这样： x = &quot;Hello, &quot; y = &quot;World!&quot; x+y这时候呢，「+」这个符号就把两个字符串连接起来了，在这里的 x+y 就等于 Hello，World！![](http://owx1uvd7t.bkt.clouddn.com/py9-8.webp)## 原始字符串有一些符号是代表特殊意义的，比如说 「\\n」就代表换行。比如像这样：print(&quot;小帅b\\n我爱死你了。&quot;)那么这时候在 Python 眼中就是：小帅b我爱死你了。![](http://owx1uvd7t.bkt.clouddn.com/py9-9.webp)![这很好啊， Python 很聪明还帮忙换行啦！](http://owx1uvd7t.bkt.clouddn.com/py9-10.webp)可是，有时候 Python 自作聪明了，比如说我们有这么一个在 c 盘下的一个叫做niubi的文件夹「C:\\niubi」，那么我们这样打印的话：print(&quot;C:\\niubi&quot;)结果你也知道了，路径被拆掉了。![](http://owx1uvd7t.bkt.clouddn.com/py9-11.webp)这就尴尬了，不过还好，有个叫做原始字符串的东西，我们只要在前面加个「r」就相安无事了，这时候 Python 就知道，哦，原来你要的是原始字符串啊，那老子不帮你换行了，省的被说自作聪明。我们只需要这样：print(r&quot;C:\\niubi&quot;)![](http://owx1uvd7t.bkt.clouddn.com/py9-12.webp)ok，Python基本数据类型之「字符串」就到这里，当然字符串的使用以后会经常用到的，对字符串的操作，字符串的序列，Unicode等是接下来需要了解使用的。# Python 的控制流条件语句## if...else还记的你以前小学的时候老师问你用「如果...那么...否则...」来造句么？每当想起这个的时候，我就会想到费玉清老师的经典名句：「你追我，如果你追到我，我就跟你嘿嘿嘿。」那么在Python如何表示的呢？ 其实很简单，就是 if 和 else：```python if 你追到我： （如果的条件语句） 我就跟你嘿嘿嘿 （如果为真，就执行这里） else ： （否则） 我就不跟你嘿嘿嘿 （如果为假，就执行这里）```## if...elif...else此外，如果老师要你用「如果...否则如果..否则..」来造句的话，比如说：如果你很持久，那么我嫁给你，否则如果你很有钱，那么我考虑一下，否则滚蛋。那么对应于 python 来说就是：```python if 你很持久： 嫁给你 elif 你很有钱： 考虑一下 else： 滚蛋。```好了，我们已经知道怎么用Python去使用我们的条件语句了，那么如果你想开发一个猜数字的小程序对你来说不在话下了。我们这就来开发一个python猜数字小游戏，首先我们自己在程序定义好一个数字，然后让用户去猜，如果猜中了我们就恭喜他，猜不中就告诉他猜的数字偏大还是偏小。打开我们的idle，撸起我们的代码：首先定义一个变量，把我们要被猜的数字先写好：`number = 520`接着让用户输入数字：`guessNumber = int(input(&apos;请输入你要猜的数字： &apos;))`接着我们来判断：```pythonif guessNumber == number : print(&quot;哇塞，牛逼啊，这就被你猜中了&quot;)elif guessNumber &lt; number : print(&quot;你猜的数字小了，再往高了猜&quot;)else : print(&quot;你猜的数字大了，再往低了猜&quot;)```![](http://owx1uvd7t.bkt.clouddn.com/py10-1.webp)![](http://owx1uvd7t.bkt.clouddn.com/py10-2.webp)## and如果你想要一个又有钱又帅的男人，怎么用 python 表示呢？可以这样：```if 有钱 and 帅 ： 嫁给你。```在这里就用到了「and」这个逻辑符，就是并且的意思，如果有钱和帅同时成立，那么就执行 if 下的语句。如果他没钱，那么立即返回，不会再管他帅不帅了，不会去执行 if 下面的语句。## or那么这时候你可能会问：那么我想要嫁给一个有钱或者帅就行了，也就是满足其一我都嫁，怎么表示呢？可以这样：```if 有钱 or 帅 ： 嫁给你。```这里用到的「or」逻辑符，它代表的意思就是或者，如果他是一个有钱的人，那么就直接执行 if 下面的语句，不需要再去判断帅不帅了，如果他没钱，就会再去判断他帅不帅，如果帅才执行 if 下面的语句。![虽然我没钱也不帅，但是我骚，可不可以嫁给我？](http://owx1uvd7t.bkt.clouddn.com/py11-1.webp)# Python中的循环语句不知道你有没有听过这么个东西：除去睡眠，我们每个人只能活1万多天，有些人活了1万多次，而有些人呢，则只是活了1天，而重复了1万多次。我希望我的读者不要成为后者，咱们每天提升自己一点点，活出个样子来。![好阔怕，我不要重复~~](http://owx1uvd7t.bkt.clouddn.com/py11-2.webp)在 Python 的世界里面，可以用 while 和 for 来表示重复，也就是循环。## while循环``` while 活着： 每天做着一样的事情。```这样写的意思就是，只要你活着，就一直不断的执行while下面的语句。我们可以来写一个抛硬币的 python 程序，我们事先定义好硬币的正反面，然后让用户猜，如果用户猜对了就奖励一个吻，猜错了就继续猜，直到让他猜中为止。打开我们的 IDLE，代码撸起来：首先定义一个变量，我们的值定义为正面：`coin = &quot;正面&quot;`接着定义一个 flag ：`flag = True`然后我们写一个循环：```pythonwhile flag : guess = input(&quot;请猜一下是正面还是反面：&quot;) if(guess == &quot;反面&quot;) : print(&quot;你猜错了，继续猜&quot;) elif(guess == &quot;正面&quot;) : print(&quot;恭喜你猜对了，奖励你一个吻&quot;) flag = False```![](http://owx1uvd7t.bkt.clouddn.com/py11-3.webp)执行：![](http://owx1uvd7t.bkt.clouddn.com/py11-4.webp)解释一下：当 while 发现 flag 为 true 的时候，就会一次又一次的执行执行 while 下面的一句，直到我们猜中之后，我们就将flag 这个变量改为 false ，while 发现为 false 的时候就不往下循环了。## for循环while 可以做到在条件为真的时候反复的执行，不过有时候我们需要在特定范围循环，比如说我们要在第一天到第五天每天啪啪啪一次，那么这时候用 for 就再适合不过了：```days = [1,2,3,4,5]for day in days : print(&quot;第&quot; + str(day) + &quot;天啪啪啪&quot;)```我们来运行下：![](http://owx1uvd7t.bkt.clouddn.com/py11-5.webp)可以看到第一次执行，day就是1，第二次执行day就是2，它就这样一直循环下去，没有一点念想。## 终止循环break有一天你突然发现，我不能再这么下去了，不能再重复的过这样的日子了，得有点改变，跳出这个重复的怪圈，那么对于 Python 来说，用break：```while 活着： 重复的过日子。 if（醒悟）： break```通过 break 呢，就可以跳出这个循环了。## continue有时候我们在循环里面，在某个地方不希望它循环下去，先跳过本次接下来的东西，直接执行下一次，这时候我们就可以用 continue了，来试试：![](http://owx1uvd7t.bkt.clouddn.com/py11-6.webp)# Python中的函数你可以把函数当做是一个「特定的小程序」，可以用它们来执行特定的事情。Python中有内置了许多「特定的小程序」，我们可以非常方便的直接调用它们来执行我们想要操作的东西，这叫内置函数。另外我们也可以根据我们自己的需要来创造「特定的小程序」，这叫自定义函数。## 定义函数假设我们要自己定义一个函数，这个函数用来叫：亚麻跌，哈哈，想想我们一调用这个函数，它就叫「亚麻跌」。是不是很好玩。像这样定义一个函数：```def jiao（）： print（&quot;亚麻跌~~~&quot;）```那么当我们要调用它的时候只要这样「jiao（）」就可以了。用 IDLE 来试一试吧：![](http://owx1uvd7t.bkt.clouddn.com/py12-1.webp)![](http://owx1uvd7t.bkt.clouddn.com/py12-2.webp)来解释一下：```def jiao（）： print（&quot;亚麻跌~~~&quot;）```这里的 def 就是一个关键字来的，代表我们要去定义一个函数，而 jiao 就是函数名称，当我们要使用这个函数的时候直接调用它就可以了。而 print（&quot;亚麻跌~~~&quot;） 就是**函数体**，也就是它所具备的功能实现。## 函数的形参和实参我们既然定义了一个会叫床的函数了，那么每调用一下它就叫一下是不是不太爽？如果我们能调用这个函数，然后传个数字给它，这个数字是多少，它就叫多少次，岂不是更好？可以这样：```def jiao(times) : for time in range(times) : print(&quot;亚麻跌~~~&quot;)```在这里我们定义了一个 times 的参数，接下来我们通过这个range用内置函数生成一个序列，接着用 for 循环，这样子当我们调用函数并传一个数字进去，它就能根据这个数字，去叫相应的次数了。比如我们调用 jiao（5），那么它就会叫 5 次。![](http://owx1uvd7t.bkt.clouddn.com/py12-3.webp)![](http://owx1uvd7t.bkt.clouddn.com/py12-4.webp)那么如果我们想要用户输入多少次，就让它叫多少次，怎么玩呢？想必你看过之前的文章也知道怎么玩了：![](http://owx1uvd7t.bkt.clouddn.com/py12-5.webp)![](http://owx1uvd7t.bkt.clouddn.com/py12-6.webp)可以看到我们这里的 jiao（int（time）） 传入的是一个变量，那么这样传递的参数叫做**形参**。而我们刚刚 jiao（5）传递的是一个实实在在的数字，我们叫**实参**。## 局部变量和全局变量我们在函数里面定义的变量，只有函数里面才可以用，在函数外面是使用不到这个变量的，所以这个变量存在函数这个局部里，我们叫这个变量为局部变量。比如说：```def jiao(times): x = 1 for time in range(times+x): print(&quot;亚麻跌~~~&quot;)```这里的x就是局部变量啦。知道了什么是局部变量之后我们在来了解一下什么是全局变量，其实顾名思义，全局嘛~ 那么就是哪里都可以使用这个变量咯。比如说我们在函数内想要更改外边的变量，怎么办呢？这时候我们可以使用 global：```def jiao(times): global x x = 5 for time in range(times+x): print(&quot;亚麻跌~~~&quot;)x = 2jiao(5)```那么这里 x 就是全局变量。## return返回值有时候我们需要调用一个函数返回给我们结果，比如我们定义了一个加法计算的函数，我们希望扔两个数给它，它直接计算好然后返回给我们，那么这时候我们就可以用到 return：定义一个加法的函数，并返回结果：```def addition(x,y): return x+y```那么我们调用的时候：`print(addition(5,6)) `直接返回 11 。## docString很多程序员其实不太喜欢写文档的，因为觉得文档这事儿好像不关自己的事情，代码才是。老子写个代码而已，凭什么还要我写文档？Python 有个叫做 docString 的东西完美解决了这问题，让你直接在代码中写文档，其实说白了就是给代码写点注释，什么语言都会有给代码写注释的，不过 Python 的 docString 可以直接把你的注释变成文档，是不是很厉害？在函数、方法、模块、类中的第一句注释语句就是 docString，可以通过 help（） 或者 __doc__ 进行访问。比如这里的 requests 模块的 docString 是这样的：```# -*- coding: utf-8 -*-# __# /__) _ _ _ _ _/ _# / ( (- (/ (/ (- _) / _)# /&quot;&quot;&quot;Requests HTTP Library~~~~~~~~~~~~~~~~~~ Requests is an HTTP library, written in Python, for human beings. Basic GETusage: import requestsr = requests.get(‘https://www.python.org&#39;)r.status_code 200‘Python is a programming language’ in r.content True … or POST: payload = dict(key1=’value1’, key2=’value2’)r = requests.post(‘http://httpbin.org/post&#39;, data=payload)print(r.text) { … “form”: { “key2”: “value2”, “key1”: “value1” }, … } The other HTTP methods are supported - see requests.api. Full documentationis at http://python-requests.org. :copyright: (c) 2017 by Kenneth Reitz.:license: Apache 2.0, see LICENSE for more details.“””12345678910我们可以通过 help(requests) 或者 requests.__doc__ 就可以访问到它的文档了。接下来我们自己写一个docString吧。我们定义一个叫 myDoc 的函数，传入两个参数，再写一下docString，告诉别人我们的函数是干嘛的，传入的参数是什么，返回什么。 def myDoc(param1 ,param2): “”” this is myDoc function :param param1: this is a first param :param param2: this is a second param :return: param1 + param2 “”” print(param1 + param2) return param1 + param2` 是不是一目了然。 而且我们还可以使用 sphinx 的 autodoc 自动从docString生产api文档。是不是很方便呢？ 持续更新中，敬请期待！ 参考文章 Python 基础教程| 菜鸟教程 Python教程- 廖雪峰的官方网站 python基础教程_w3cschool","tags":[{"name":"教程","slug":"教程","permalink":"https://www.wistbean.com/tags/教程/"},{"name":"python","slug":"python","permalink":"https://www.wistbean.com/tags/python/"},{"name":"python基础","slug":"python基础","permalink":"https://www.wistbean.com/tags/python基础/"}]},{"title":"通过互联网赚钱的 9 种渠道","date":"2018-09-01T07:28:10.000Z","path":"make-money-on-the-internet.html","text":"我一直很庆幸能活在这个互联网的时代，给我们带来太多的便利，就像你现在看到的这篇文章，我把文字码出来，转化为 bit 信息，通过互联网秒传到你眼前。 互联网不仅给我们提供诸多的生活便利，还能让我们从中赚到钱。 谈到钱，有些人会觉得很俗，好像钱不应该拿上台面说似的,觉得丢人。 我倒不觉得，首先我承认我爱钱，我觉得钱可以给我带来物质上的基本需求满足，如果连最基本的物质都没有，谈什么理想。 互联网赚钱 君子爱财，取之有道就行了，所以在不犯法不违反道德的前提下，所有通过自己努力赚到的钱，我都不觉得丢人。 真正丢人的是那种表面一套，背地里一套的人。 接下来就来给大家分享一下通过互联网赚钱的 9 种方式，相信如果你动动脑筋，付出点时间精力，每个月赚点零花钱，买个范冰冰版的充气娃娃啥的不成问题。 文章投稿现在是新媒体的发展迅猛，像微信说的：「再小的个体，也有自己的品牌」。所以现在很多新媒体公司都需要文案，如果你有一定的写作能力的话，不妨去找些 大v 投稿，看你的文章质量，一般 1000 字有两三百块钱。读书那会我就有投过稿，写了篇技术文，赚了 150 块钱，当时开心的不要不要的。 后来还有人找我入驻他们的平台，写写区块链的文章，给我虚拟币。但是我拒绝了 - - 互联网赚钱 头条号、Youtuebe以前，互联网还没普及的时候，人们大多都是通过电视去获取信息，那会电视明星就是现在所说的大V，但是现在互联网普及了，那些通过直播的，做视频的顺势而为，成为了草根明星,他们也赚了好多钱。但是不是说只有 大V 才能在网络上赚钱，今日头条有个叫头条号的平台，你可以在上面写文章，上传视频，头条号会帮你投放广告，如果多人看你的视频或者文章，那么你就可以获取广告费。 教大家一个套路，之前我试了一下，去 YouTuebe 找了一个热门视频，把视频抓取下来然后发到头条号上，结果有 330k+ 的播放量，通过头条号的广告获得了 50 多元，不过我后来就没玩这个了，主要因为没时间去找视频啥的，如果你是个学生党可以去操作一下，每天赚点零花钱还是不错的。 互联网赚钱 Youtuebe 也是同样的道理，如果你有什么 idea 制作成视频，上传到 Youtuebe ，也会有广告分成的，前提是你有一定的播放量。 薅羊毛不知道大家知不知道国外有个叫做 PayPal 的东西，这个产品一开始获取用户的方式就是砸钱，新用户注册可以获取 $10 , 推荐一个用户可以再获取 $10 , 现在很多互联网产品一开始也是采用这种方式，比如之前很多的 P2P 产品，如今大多都暴雷，跑路了，可是一开始很多羊毛党都在这些平台薅羊毛，有些专业的羊毛党搞了很多手机号，从而薅了一笔。像之前的饿了么，美团，滴滴打车那些优惠券啥的，有人就通过获取这些优惠券拿去帮人优惠点餐，从而赚取差价，月入几w。 很多人看不起，但是人家就是把钱给赚了。 互联网赚钱 像现在知识付费时代，有很多平台有活动，通过你分享的链接让你的朋友付费加入学习，你就能从中获取一定的佣金，这也算是薅羊毛的方式。 照片卖钱照片也可以卖钱，如果你拍照技术不错的话，除了晒朋友圈之外，不妨把照片上传到类似 stockphoto 的平台，别人看到不错的照片，又很想要的话，只愿意付费购买的。这个我没玩过，因为我比较喜欢自拍。我怕卖出的价格太高。 互联网赚钱 淘宝客，affiliate你可以通过 阿里妈妈 这个平台注册成为一个淘宝客，当然其它平台也有，例如京东联盟，亚马逊的 affiliate 等，然后你就可以从里面推荐一些商品给别人，如果别人购买了你推荐的商品，相当于帮别人卖产品。那么你就可以从中获取一定的佣金，不同的商品佣金比例不同。我一朋友在上次双十一通过淘宝客赚了台mac电脑。 互联网赚钱 接单如果你是设计师，或者程序员接单应该不陌生吧，因为我是程序员出身，所以身边的朋友有时候有需求会找我做，一般给个项目估价和时间评估，然后达成合作就开干了。除了跟朋友合作之外，网上还有一些平台可以接单，不过国内的就算了，坑人的比较多，动不动就让你付费弄个会员啥的，在这里给大家推荐两个国外的平台，在这里赚的可是美金哦。一个是 upwork，一个是Freelancer，这两个平台是目前比较多人用，而且知名度也比较高的，很多人在上面发布需求，你可以在上面写好自己的profile，然后去找适合自己的项目。最好懂点英语，想想我以前一边拿着翻译软件一边跟老外聊需求就搞笑。 互联网赚钱 做产品程序员都有一个梦想，就是「Write the code. Change the world」。如果能找到用户的痛点，并且实时的推出一款应用(这也是我之后想干的事)，让用户用的爽，人家很愿意付费购买的。还有一种收入方式就是在自己的产品中投放广告，比如Google AdSense。 互联网赚钱 买币、股票理财这种理财投资方式属于被动收入了，也就是躺着赚钱，但是前提需要你有钱而且风险也很高，对于理财这方面我在学习中，投的钱不多，等过阵子有经验了再跟大家分享吧。 知识付费现在中国人有一个让国外的人惊了个呆的就是，中国人越来越喜欢和认可为知识买单，本质就在于「知识本身不值钱，但知识的表达方式、能让人懂的表达方式，非常值钱」，我的知识星球也算是知识付费的一种，如果你想做知识付费的话，你前期有付出的比你想象的要多的多，如果你还没那个执行力和责任心的话，劝你打消这个念头吧。 互联网赚钱 ok，以上，那些开淘宝店啥的就不说了，现在来说已经饱和了，不建议搞，倒不如多花点时间提升下自己。 最后希望关注我的朋友能获取到有价值的信息之外，也希望大家发大财哈哈哈。 哦对了，还有一件事，问下大家，我的手机屏幕坏了，请问哪里可以修啊？？ 互联网赚钱 相关文章 能通过互联网赚钱的网站平台有哪些？ 如何来实现自动赚钱，互联网赚钱的思维","tags":[{"name":"互联网","slug":"互联网","permalink":"https://www.wistbean.com/tags/互联网/"},{"name":"个人理财","slug":"个人理财","permalink":"https://www.wistbean.com/tags/个人理财/"},{"name":"赚钱","slug":"赚钱","permalink":"https://www.wistbean.com/tags/赚钱/"}]},{"title":"对于宅男来说，硬盘里的数据就是命","date":"2018-08-30T17:45:26.000Z","path":"backups.html","text":"概要个人隐私泄露现象微博被自动关注了不认识的账号淘宝自动收藏了商品老是收到垃圾短信QQ无缘无故进了陌生群事件北京瑞智华胜公司窃取 30 亿条个人信息，非法牟利千万元阿里巴巴安全部协助警方破获了一起数据窃取案件我们的信息怎么被泄露的呢？这些公司和运营商们合作中，截取到了用户的 cookie 权限cookie用户上网过程中都会产生cookie网站辨别用户身份而存储在用户本地电脑的数据####### 记录用户凭证 ####### 记录用户上网行为 数据上网行为在登录过的网站中的账号密码谋取利润导粉刷量恶意推广我们应该警惕账号被盗个人财产安全生活受到不必要的麻烦信息被卖我们应该怎么做？别以为网络是虚拟的你就很安全使用APP的时候非必要的权限不要开启开启的权限只在应用运行的时候授权密码不要都设置成一样的，也不要设置的过于简单,防止被人撞库和暴力破解推荐使用密码管理器lastpasshttps://www.lastpass.com/zh安装插件设置主密码天下没有免费的午餐，免费的WIFI不要随便连在网上尽量用昵称，能不填真实信息就不填真实信息手机拍照关掉定位功能，因为你如果没关掉的话，发给别人看的照片人家能清楚的知道你是在哪里拍的iphone用户在设置–隐私–定位服务–相机–关闭对不太信任的软件使用虚拟机运行搭建个VPN代理访问不要贪小便宜，办理正规的宽带肯定会电台相关肯定会电台肯定会电台RSS订阅","tags":[{"name":"互联网","slug":"互联网","permalink":"https://www.wistbean.com/tags/互联网/"},{"name":"肯定会电台","slug":"肯定会电台","permalink":"https://www.wistbean.com/tags/肯定会电台/"},{"name":"数据备份","slug":"数据备份","permalink":"https://www.wistbean.com/tags/数据备份/"}]},{"title":"hexo搭建个人网站博客完全教程","date":"2018-08-30T11:38:13.000Z","path":"build-personal-website.html","text":"为什么要有自己的个人网站呢？我觉得现在身处于互联网时代，有自己的个人网站其实就和名片差不多了，在这里可以不断的记录自己的生活，总结自己的知识，人生思考什么的，以后介绍自己直接把网站扔给对方。一来是可以装下逼，二来是可以让对方更好的了解自己。 再者就是相对的自由了，现在市面上有很多 Blog 系统，你只要注册一下，就可以直接在他们的平台生成一个你自己的blog，虽然很方便，但是你要付出的代价就是：忍受他们平台在你的blog嵌入一堆广告。受他们的限制与监管，人家不爽就随随便便删了你的文章，没商量。 比如这样： 知乎 简书 微信 爽吗？反正我是不爽。 所以自己搞一个完全属于自己的网站，相对来说，没那么苦逼。为什么说相对？ 因为我们也要看大佬的眼色啊。 但是总比被各种平台恶心好吧。也别幻想什么区块链博客系统，对于目前来说，不现实。 使用 Hexo 框架来搭建个人网站这两天我重新整理了一下自己的 Blog ，因为我之前用的是 Octopress 框架，有些年头了，一些主题和插件并不是很多。 后来对比了几个框架，发现 Hexo 不错，和 Octopress 差不多，也是可以用 Markdown 写文章，然后生成静态网站，不过主题丰富一些。 Hexo 是基于 nodejs 的,搭建起来很简单。那么接下来就说说如何从0开始搭建吧。 开始搭建 因为 hexo 是基于 node 框架的，所以呢，我们首先需要下载安装node，下载地址：nodejs 安装完之后，我们打开命令窗口，输入 node -v ，如果返回下图所示，那么就说明你安装node成功了。 node 版本 安装成功后，我们在命令行窗口运行如下命令来安装hexo： npm install hexo-cli -g 初始化博客目录： hexo init wistbean.github.io (这里的wistbean换成你自己的英文名) 初始化完成后，我们就进入我们的目录： cd wistbean.github.io 安装 npm install clean一下，然后生成静态页面 hexo clean hexo g g 就是generate ,生成的意思 把你的网站运行起来 hexo s s 就是server ,在服务器运行的意思 打开你的浏览器，输入 localhost:4000 。 自此，你的个人网站就这么速度的搭建起来了！ hexo 让你的个人网站漂亮的 blingbling 的修改你的网站中的个人信息进入你的网站目录，打开 _config 文件，这个文件是用来配置你的网站信息的。 这里列出我的简单配置，具体可以看这个文档 title: wistbean subtitle: 肯定会 description: wistbean的个人博客，主要涉及到编程（Java，Python，Linux等），个人提升学习，视频教程，《肯定会软件技术》电台节目 keywords: wistbean，肯定会，java，python，电台，教程 author: wistbean language: zh 选一个主题刚搭建完的网站，是不是觉得有点丑，不符合你的漂亮的脸庞？ 反正我是这么觉得的，那么就选一个主题来装饰一下吧，在这里可以选择你要的主题：hexo主题 下载主题选择好了你的主题之后，就可以下载主题资源了，比如我这里选择一个 NEXT 主题来演示一下： git clone https://github.com/iissnan/hexo-theme-next 这里主要就是将主题下载到我们的themes目录下。 如果你还不熟悉 Git 的使用的话，可以看看我之前的 Git 视频教程：代码托管Git的使用 配置主题主题下载完之后，在你根目录下的 _config.yml 文件中，修改 theme 为你的主题名字： theme: next 重新生成和运行hexo g hexo s 访问一下看看，是不是比之前好看多了？ hexo next主题 写上你的第一篇博客文章，打上标签和分类你已经把你的网站打扮的漂亮大方简洁惹人爱了，那么接下来就要好好去写内容了，内容才是重要的。 两种方式来新建你的博文命令形式 在你的blog目录下使用如下命令： hexo new article （这里的article写上你的文章的名称） 输入这样的命令之后你的source/_posts下就会生成一个 article.md 文件，在这个文件下就可以写上你的博客内容了。用 Markdown 的语法去写。 直接新建方式直接点的方式就是直接在source/_posts新建一个 Markdown 文件，其实和命令形式是一个道理，只不过命令形式用了命令来创建。推荐使用命令的方式，毕竟 Geek 一点。 给你的文章打上标签打标签能让你的文章方便检索。 打开标签功能： hexo new page tags 这时候你的source/下生成 tags/index.md 文件，我们将其打开，然后把它改成： type: &quot;tags&quot; comments: false 这时候你要为你的文章打上标签就可以在文章的头部写上： tags: - Tag1 - Tag2 - Tag3 给你的文章添加分类分类，归档，是你博客的特性之一。 打开分类功能： hexo new page categories 这说你的source目录下生成 categories/index.md 文件，我们将其打开，把它改成： type: &quot;categories&quot; comments: false 这时候你就可以给你的文章归类存档了，使用方式就是在你的文章的头部加上： categories: - 分类1 - 分类2 注意：标签和分类要确定你的配置文件 _config.yml 是否有打开了 tag_dir: tags 和 category_dir: categories。另外，Markdown 的语法是写作最优雅最简洁最简单的，如果之前没用过的建议去学一下Markdown 语法说明，一般一个钟左右就能掌握。因为它和HTML那样简单。 给你的文章添加评论当别人看了你的文章，有问题想跟你探讨，没评论怎么行？评论也是你的 Blog 交互的重要方式之一。 现在很多主题都内置了第三方评论的系统。比较常用的有： 多说 ：http://duoshuo.com/ 畅言 ：https://changyan.kuaizhan.com/ Valine：https://github.com/xcss/Valine Disqus：https://disqus.com/ 友言: http://www.uyan.cc/ gitment: https://github.com/imsun/gitment 自己去看一下，喜欢哪个用哪个，自己的 Blog 就是要自由。 选好你的评论系统之后，进入平台注册后，平台会给你一个 APPID和appkey。拿到这些信息到你的主题下的配置文件下设置。 以 next 主题和畅言评论为例：进入你的themes/next,打开_config.yml，定位到 changyan ，把 enable 改为 true。 changyan: enable: true appid: 这里写上你的畅言在appid appkey: 这里写上你的畅言在appkey 设置好之后，重新clean生成一下就有评论啦： hexo clean hexo g hexo s 打开你的预览连接看看你的文章下方，已经有评论功能啦。 评论 让全世界的人都认识你已经搞定了个人blog，接下来当然是要部署到网上让人家访问了，如果不想花钱，可以使用GitHub Pages，使用它就可以部署自己的网站啦。 对于 GitHub 不知道怎么用的童鞋，可以看一下我的这个视频教程：GitHub完全使用指南 创建Github pages 仓库接着创建一个 xxx.github.io 的 public 仓库，这里的xxx写你的名字，比如我写的是 wistbean.github.io,那么到时我就可以通过 wistbean.github.io 来访问我的网站了。创建完成之后，那么你就有自己的 Git 地址了。 安装 hexo-deployer-git在你的博客目录下输入如下命令： npm install hexo-deployer-git --save 配置你的Git打开你的配置文件，然后输入你的git地址： deploy: type: git repo: https://github.com/xxx/xxxx.github.io.git 推送你的网站到Github上直接输入命令 ： hexo d d 就是 deploy ， 部署上去的意思。 访问你的网站直接在浏览器输入你的 xxx.github.io 就可以访问啦！ 要有点个性，绑上你的域名有了自己的网站，当然是要自己的网址，这样才帅嘛，当然有自己的服务器就更帅了。 购买域名关于域名的购买我比较推荐去godaddy，这是国外的域名商，使用起来不错的。 绑定域名买完你的域名之后，接下来几个步骤轻松搞定： 添加 CNAME 文件在你的博客的 sources 目录下新建一个 CNAME 文件，这个文件里面就写你的域名就可以了，比如我就写： www.wistbean.com。 接着将文件push到你的GitHub上，可以使用 hexo s 命令。 在你的域名商后台进行 DNS 解析添加两条记录：1. 主机记录： @ 记录类型：A 记录值：192.30.252.154 或者 192.30.252.153 2. 主机记录： www 记录类型： CNAME 记录值： xxx.github.io (这里就是你的github仓库名称) GitHub 设置域名在你的 GitHub 设置域名，在你的 GitHub 博客项目中点击 Settings，在 GitHub Pages 下的 Custom domain 写上你的域名，然后 save。 以上，你就可以通过你自己的域名访问到你的网站啦！ 服务器搞起，完全自主权虽然你现在已经可以使用你的域名访问你的网站，但是呢，有自己的服务器托管自己的网站还是爽一点的，GitHub屏蔽了百度的爬虫，也就是说别人通过百度搜索不到你的网站，这你能忍？ 有自己的服务器的话就可以被更多搜索引擎收录，还有呢就是有自己的服务器还可以干些其它的事情。 购买服务器这里的服务器当然推荐要买国外的，这样的话你的域名就不需要备案，而且还可以搭建 VPN ，一举三得，酸爽。 服务器购买推荐使用搬瓦工，因为这是我用过觉得性价比最好的，而且呢，还可以领取到优惠码，很多人不知道的，领取优惠码可以看这里：拿到搬瓦工优惠码 使用 Nginx买了服务器之后，那么你就可以用 Nginx 来当做你网站的 web 服务器，搭建也很简单，关于Nginx搭建和配置就不多说了，如果之前没玩过可以看这里：Nginx搭建静态网页服务器 DNS解析到你的服务器在你的域名商，使用 DNS 解析，添加一条 A 记录就可以了，记录值就是你这台服务器的 IP 地址，一般启用后 30 分钟左右就可以访问啦。 以上你就完全拥有属于自己的个人网站啦。 hexo参考文章 GitHub+Hexo 搭建个人网站详细教程 使用Hexo搭建个人博客 hexo高阶教程：教你怎么让你的hexo博客在搜索引擎中排第一","tags":[{"name":"搬瓦工","slug":"搬瓦工","permalink":"https://www.wistbean.com/tags/搬瓦工/"},{"name":"个人网站","slug":"个人网站","permalink":"https://www.wistbean.com/tags/个人网站/"},{"name":"教程","slug":"教程","permalink":"https://www.wistbean.com/tags/教程/"},{"name":"hexo","slug":"hexo","permalink":"https://www.wistbean.com/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"https://www.wistbean.com/tags/blog/"},{"name":"Git","slug":"Git","permalink":"https://www.wistbean.com/tags/Git/"},{"name":"Nginx","slug":"Nginx","permalink":"https://www.wistbean.com/tags/Nginx/"}]},{"title":"「2-5」使用InteliJ IDEA 创建 Maven 聚合工程","date":"2018-08-29T09:25:26.000Z","path":"java-ssm-2-5.html","text":"SSM视频教程第2-5节:Maven 聚合工程 SSM视频教程第2-5节课程概要使用 maven 的聚合工程manager 模块的聚合： pojo mapper service SSM视频教程目录 SSM视频教程目录","tags":[{"name":"教程","slug":"教程","permalink":"https://www.wistbean.com/tags/教程/"},{"name":"Java","slug":"Java","permalink":"https://www.wistbean.com/tags/Java/"},{"name":"Java视频教程","slug":"Java视频教程","permalink":"https://www.wistbean.com/tags/Java视频教程/"},{"name":"项目实战","slug":"项目实战","permalink":"https://www.wistbean.com/tags/项目实战/"},{"name":"分布式","slug":"分布式","permalink":"https://www.wistbean.com/tags/分布式/"},{"name":"SSM","slug":"SSM","permalink":"https://www.wistbean.com/tags/SSM/"},{"name":"Maven","slug":"Maven","permalink":"https://www.wistbean.com/tags/Maven/"},{"name":"InteliJ IDEA","slug":"InteliJ-IDEA","permalink":"https://www.wistbean.com/tags/InteliJ-IDEA/"}]},{"title":"「2-6」Java SSM框架的整合与Mybatis逆向工程","date":"2018-08-29T09:25:26.000Z","path":"java-ssm-2-6.html","text":"SSM视频教程第2-6节:SSM框架的整合与Mybatis逆向工程 SSM视频教程第2-6节课程概要SSM 的整合Spring –&gt; Service Spring MVC –&gt; 表现层 Mybatis –&gt; Dao Spring 事务管理XML配置123456789101112131415161718192021&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;&lt;/bean&gt;&lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt; &lt;tx:attributes&gt; &lt;tx:method name=&quot;save*&quot; propagation=&quot;REQUIRED&quot; /&gt; &lt;tx:method name=&quot;insert*&quot; propagation=&quot;REQUIRED&quot; /&gt; &lt;tx:method name=&quot;add*&quot; propagation=&quot;REQUIRED&quot; /&gt; &lt;tx:method name=&quot;create*&quot; propagation=&quot;REQUIRED&quot; /&gt; &lt;tx:method name=&quot;delete*&quot; propagation=&quot;REQUIRED&quot; /&gt; &lt;tx:method name=&quot;update*&quot; propagation=&quot;REQUIRED&quot; /&gt; &lt;tx:method name=&quot;find*&quot; propagation=&quot;SUPPORTS&quot; read-only=&quot;true&quot; /&gt; &lt;tx:method name=&quot;select*&quot; propagation=&quot;SUPPORTS&quot; read-only=&quot;true&quot; /&gt; &lt;tx:method name=&quot;get*&quot; propagation=&quot;SUPPORTS&quot; read-only=&quot;true&quot; /&gt; &lt;/tx:attributes&gt;&lt;/tx:advice&gt;&lt;aop:config&gt; &lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut=&quot;execution(* com.manong.service.*.*(..))&quot; /&gt;&lt;/aop:config&gt; web.xml配置1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xmlns:web=&quot;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; id=&quot;manong&quot; version=&quot;2.5&quot;&gt; &lt;display-name&gt;manong-manager&lt;/display-name&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;index.html&lt;/welcome-file&gt; &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt; &lt;/welcome-file-list&gt; &lt;!-- 加载spring容器 --&gt; &lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:spring/applicationContext-*.xml&lt;/param-value&gt; &lt;/context-param&gt; &lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt; &lt;/listener&gt; &lt;!-- 解决post乱码 --&gt; &lt;filter&gt; &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;/param-name&gt; &lt;param-value&gt;utf-8&lt;/param-value&gt; &lt;/init-param&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; &lt;!-- springmvc的前端控制器 --&gt; &lt;servlet&gt; &lt;servlet-name&gt;manong-manager&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:spring/springmvc.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;manong-manager&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt; SSM视频教程目录 SSM视频教程目录","tags":[{"name":"教程","slug":"教程","permalink":"https://www.wistbean.com/tags/教程/"},{"name":"Java","slug":"Java","permalink":"https://www.wistbean.com/tags/Java/"},{"name":"Java视频教程","slug":"Java视频教程","permalink":"https://www.wistbean.com/tags/Java视频教程/"},{"name":"项目实战","slug":"项目实战","permalink":"https://www.wistbean.com/tags/项目实战/"},{"name":"分布式","slug":"分布式","permalink":"https://www.wistbean.com/tags/分布式/"},{"name":"SSM","slug":"SSM","permalink":"https://www.wistbean.com/tags/SSM/"},{"name":"Maven","slug":"Maven","permalink":"https://www.wistbean.com/tags/Maven/"},{"name":"InteliJ IDEA","slug":"InteliJ-IDEA","permalink":"https://www.wistbean.com/tags/InteliJ-IDEA/"},{"name":"Spring","slug":"Spring","permalink":"https://www.wistbean.com/tags/Spring/"},{"name":"Spring MVC","slug":"Spring-MVC","permalink":"https://www.wistbean.com/tags/Spring-MVC/"},{"name":"Mybatis","slug":"Mybatis","permalink":"https://www.wistbean.com/tags/Mybatis/"},{"name":"逆向工程","slug":"逆向工程","permalink":"https://www.wistbean.com/tags/逆向工程/"}]},{"title":"「2-4」使用InteliJ IDEA 创建分布式多模块 Maven 项目","date":"2018-08-29T09:25:25.000Z","path":"java-ssm-2-4.html","text":"SSM视频教程第2-4节:分布式多模块 Maven 项目 SSM视频教程第2-4节课程概要使用 InteliJ IDEA 创建分布式多模块 Maven 项目 parent 父模块 common 通用模块 manager 管理模块 sso 单点登录模块 rest restful模块 search 搜索模块 … SSM视频教程目录 SSM视频教程目录","tags":[{"name":"教程","slug":"教程","permalink":"https://www.wistbean.com/tags/教程/"},{"name":"Java","slug":"Java","permalink":"https://www.wistbean.com/tags/Java/"},{"name":"Java视频教程","slug":"Java视频教程","permalink":"https://www.wistbean.com/tags/Java视频教程/"},{"name":"项目实战","slug":"项目实战","permalink":"https://www.wistbean.com/tags/项目实战/"},{"name":"分布式","slug":"分布式","permalink":"https://www.wistbean.com/tags/分布式/"},{"name":"SSM","slug":"SSM","permalink":"https://www.wistbean.com/tags/SSM/"},{"name":"Maven","slug":"Maven","permalink":"https://www.wistbean.com/tags/Maven/"},{"name":"InteliJ IDEA","slug":"InteliJ-IDEA","permalink":"https://www.wistbean.com/tags/InteliJ-IDEA/"}]},{"title":"「2-3」使用 InteliJ IDEA 创建 Maven 项目与相关配置","date":"2018-08-29T09:25:24.000Z","path":"java-ssm-2-3.html","text":"SSM视频教程第2-3节:使用 InteliJ IDEA 创建 Maven 项目与相关配置 SSM视频教程第2-3节课程概要使用 Intelij IDEA 创建 Maven 工程并配置 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.kendinghui&lt;/groupId&gt; &lt;artifactId&gt;manong_parent&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;!--子模块--&gt; &lt;modules&gt; &lt;/modules&gt; &lt;!--集中地定义版本号--&gt; &lt;properties&gt; &lt;junit.version&gt;4.12&lt;/junit.version&gt; &lt;maven-resources-plugin&gt;3.1.0&lt;/maven-resources-plugin&gt; &lt;maven-compiler-plugin&gt;3.2&lt;/maven-compiler-plugin&gt; &lt;/properties&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;$&#123;junit.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;!--定义一个资源拷贝的插件--&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt; &lt;version&gt;$&#123;maven-resources-plugin&#125;&lt;/version&gt; &lt;configuration&gt; &lt;encoding&gt;UTF-8&lt;/encoding&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;$&#123;maven-compiler-plugin&#125;&lt;/version&gt; &lt;configuration&gt; &lt;compilerVersion&gt;1.8&lt;/compilerVersion&gt; &lt;source&gt;1.8&lt;/source&gt; &lt;target&gt;1.8&lt;/target&gt; &lt;encoding&gt;UTF-8&lt;/encoding&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; SSM视频教程目录 SSM视频教程目录","tags":[{"name":"教程","slug":"教程","permalink":"https://www.wistbean.com/tags/教程/"},{"name":"Java","slug":"Java","permalink":"https://www.wistbean.com/tags/Java/"},{"name":"Java视频教程","slug":"Java视频教程","permalink":"https://www.wistbean.com/tags/Java视频教程/"},{"name":"项目实战","slug":"项目实战","permalink":"https://www.wistbean.com/tags/项目实战/"},{"name":"分布式","slug":"分布式","permalink":"https://www.wistbean.com/tags/分布式/"},{"name":"SSM","slug":"SSM","permalink":"https://www.wistbean.com/tags/SSM/"},{"name":"Maven","slug":"Maven","permalink":"https://www.wistbean.com/tags/Maven/"},{"name":"InteliJ IDEA","slug":"InteliJ-IDEA","permalink":"https://www.wistbean.com/tags/InteliJ-IDEA/"}]},{"title":"「2-2」码农商城 SSM 系统所需的 Maven 模块简介","date":"2018-08-29T09:25:23.000Z","path":"java-ssm-2-2.html","text":"SSM视频教程第2-2节:Maven 模块简介 SSM视频教程第2-2节课程概要了解码农商城所需要的一些模块 码农商城 SSM 系统所需的 Maven 模块简介 SSM视频教程目录 SSM视频教程目录","tags":[{"name":"教程","slug":"教程","permalink":"https://www.wistbean.com/tags/教程/"},{"name":"Java","slug":"Java","permalink":"https://www.wistbean.com/tags/Java/"},{"name":"Java视频教程","slug":"Java视频教程","permalink":"https://www.wistbean.com/tags/Java视频教程/"},{"name":"项目实战","slug":"项目实战","permalink":"https://www.wistbean.com/tags/项目实战/"},{"name":"分布式","slug":"分布式","permalink":"https://www.wistbean.com/tags/分布式/"},{"name":"SSM","slug":"SSM","permalink":"https://www.wistbean.com/tags/SSM/"},{"name":"Maven","slug":"Maven","permalink":"https://www.wistbean.com/tags/Maven/"}]},{"title":"「2-1」什么是Maven，Maven的配置","date":"2018-08-29T09:25:22.000Z","path":"java-ssm-2-1.html","text":"SSM视频教程第2-1节:Maven的概念，Maven的配置 SSM视频教程第2-1节课程概要maven 项目管理提供了一套完整的构建生命周期的框架 整合工具自动的完成一些工程的基础构建配置 maven安装 配置好jdk的环境变量的 可以在http://maven.apache.org/下载maven 配置一下maven的环境变量 运行 mvn –version 校验是否安装成功。 maven配置文件 配置镜像： 123456&lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;aliyun maven mirror&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;/mirror&gt; 配置本地仓库 1&lt;localRepository&gt;E:/mavenrepository&lt;/localRepository&gt; maven特性 依赖管理 jar包依赖 工程间的依赖 继承 聚合 工程类型 war包的项目 jar包的项目 pom工程 SSM视频教程目录 SSM视频教程目录","tags":[{"name":"教程","slug":"教程","permalink":"https://www.wistbean.com/tags/教程/"},{"name":"Java","slug":"Java","permalink":"https://www.wistbean.com/tags/Java/"},{"name":"Java视频教程","slug":"Java视频教程","permalink":"https://www.wistbean.com/tags/Java视频教程/"},{"name":"项目实战","slug":"项目实战","permalink":"https://www.wistbean.com/tags/项目实战/"},{"name":"分布式","slug":"分布式","permalink":"https://www.wistbean.com/tags/分布式/"},{"name":"SSM","slug":"SSM","permalink":"https://www.wistbean.com/tags/SSM/"},{"name":"Maven","slug":"Maven","permalink":"https://www.wistbean.com/tags/Maven/"}]},{"title":"「1-4」GitHub完全使用指南","date":"2018-08-29T09:25:21.000Z","path":"java-ssm-1-4.html","text":"SSM视频教程第1-4节:GitHub完全使用指南 SSM视频教程第1-4节课程概要Github全球最大的社交编程网站！ Github 有什么用？ 代码托管 多人协作 个人博客 个人简历 使用Github star 收藏 fork “复制” repository 仓库 watch 观察 Gist 代码片段 Pull Request 请求合并 Issue 提问题/bug clone 克隆 git config 配置信息 git push 将本地代码推送到github上去 git pull 将远程的代码更新下来 git branch 分支 git merge 合并 ssh授权 生成秘钥：ssh-keygen -t rsa 验证是否授权成功： ssh -T git@github.com 12Hi testWistbean! You&apos;ve successfully authenticated,but GitHub does not provide shell access. SSM视频教程目录 SSM视频教程目录","tags":[{"name":"教程","slug":"教程","permalink":"https://www.wistbean.com/tags/教程/"},{"name":"Git","slug":"Git","permalink":"https://www.wistbean.com/tags/Git/"},{"name":"GitHub","slug":"GitHub","permalink":"https://www.wistbean.com/tags/GitHub/"},{"name":"Java","slug":"Java","permalink":"https://www.wistbean.com/tags/Java/"},{"name":"Java视频教程","slug":"Java视频教程","permalink":"https://www.wistbean.com/tags/Java视频教程/"},{"name":"项目实战","slug":"项目实战","permalink":"https://www.wistbean.com/tags/项目实战/"},{"name":"分布式","slug":"分布式","permalink":"https://www.wistbean.com/tags/分布式/"},{"name":"SSM","slug":"SSM","permalink":"https://www.wistbean.com/tags/SSM/"}]},{"title":"「1-3」代码托管Git的使用","date":"2018-08-29T09:25:20.000Z","path":"java-ssm-1-3.html","text":"SSM视频教程第1-3节:代码托管Git的使用 SSM视频教程第1-3节课程概要Git代码的版本控制管理系统 Git可以干什么呢？ 防止代码丢失 远程同步代码 团队合作利器 代码还原 记录代码版本 安装GitGit的常用的操作命令 git init 初始化git仓库 git status 查看状态 git add 将文件添加到git仓库的暂存区 git commit 将添加到暂存区的文件提交到git仓库 git log 查看日志 git branch 查看当前的分支 git branch hi 创建一个叫做“hi”的分支 git checkout hi 切换分支到“hi”分支 git branch -d hi 删除“hi”分支 SSM视频教程目录 SSM视频教程目录","tags":[{"name":"教程","slug":"教程","permalink":"https://www.wistbean.com/tags/教程/"},{"name":"Git","slug":"Git","permalink":"https://www.wistbean.com/tags/Git/"},{"name":"Java","slug":"Java","permalink":"https://www.wistbean.com/tags/Java/"},{"name":"Java视频教程","slug":"Java视频教程","permalink":"https://www.wistbean.com/tags/Java视频教程/"},{"name":"项目实战","slug":"项目实战","permalink":"https://www.wistbean.com/tags/项目实战/"},{"name":"分布式","slug":"分布式","permalink":"https://www.wistbean.com/tags/分布式/"},{"name":"SSM","slug":"SSM","permalink":"https://www.wistbean.com/tags/SSM/"}]},{"title":"「1-2」传统的集群架构和分布式架构区别","date":"2018-08-29T09:25:19.000Z","path":"java-ssm-1-2.html","text":"SSM视频教程第1-2节:传统的集群架构和分布式架构区别 SSM视频教程第1-2节课程概要第二节 架构集群架构缺点： 耦合度太高了 增加了团队的合作成本 不能够去灵活的部署 分布式架构优点： 项目拆分成多个模块，耦合度降低 单点运行，团队合作效率高了 可以灵活部署 缺点： 需要去额外的开发，让各个模块之间能够通信！ SSM视频教程目录 SSM视频教程目录","tags":[{"name":"教程","slug":"教程","permalink":"https://www.wistbean.com/tags/教程/"},{"name":"Java","slug":"Java","permalink":"https://www.wistbean.com/tags/Java/"},{"name":"Java视频教程","slug":"Java视频教程","permalink":"https://www.wistbean.com/tags/Java视频教程/"},{"name":"项目实战","slug":"项目实战","permalink":"https://www.wistbean.com/tags/项目实战/"},{"name":"分布式","slug":"分布式","permalink":"https://www.wistbean.com/tags/分布式/"},{"name":"SSM","slug":"SSM","permalink":"https://www.wistbean.com/tags/SSM/"},{"name":"架构","slug":"架构","permalink":"https://www.wistbean.com/tags/架构/"}]},{"title":"「1-1」分布式高并发java web项目实战视频教程介绍","date":"2018-08-29T09:25:18.000Z","path":"java-ssm-1-1.html","text":"SSM视频教程第一节:项目实战视频教程介绍 SSM视频教程第一节课程概要面向的学习人群 具备有一定的java基础 初级开发者 -&gt; 中高级开发者 具备一定的自学能力和执行能力！ 技术选型 Spring Spring MVC Mybatis redis solor EasyUI UEditor JQuery Freemark activMQ httpClient MySQL 开发环境 InteliJ IDEA Maven Tomcat7 JDK Nginx Git postman sqlyog win7 计划 技术架构 （集群和分布式架构的区别） 工程搭建 （maven） SSM框架的整合 Mybatis逆向工程以及使用 日志的添加与使用 拦截器 后端功能 （系统的开发，图片系统，数据等等） 前端功能 （商品浏览，下订单，购物车等等。。） redis使用以及集群搭建 solor使用和集群搭建 JMS 消息队列 （activMQ） sso单点登录 restful服务 在Linux上部署 SSM视频教程目录 SSM视频教程目录","tags":[{"name":"教程","slug":"教程","permalink":"https://www.wistbean.com/tags/教程/"},{"name":"Java","slug":"Java","permalink":"https://www.wistbean.com/tags/Java/"},{"name":"Java视频教程","slug":"Java视频教程","permalink":"https://www.wistbean.com/tags/Java视频教程/"},{"name":"项目实战","slug":"项目实战","permalink":"https://www.wistbean.com/tags/项目实战/"},{"name":"分布式","slug":"分布式","permalink":"https://www.wistbean.com/tags/分布式/"},{"name":"SSM","slug":"SSM","permalink":"https://www.wistbean.com/tags/SSM/"}]},{"title":"CentOS快速搭建一个属于自己的IPsec/L2TP VPN","date":"2018-08-29T09:16:04.000Z","path":"ipsec,l2tp_vpn.html","text":"搭建IPsec/L2TP VPN的准备 一台云服务器VPS 远程连接VPS工具 1.我使用的云服务器是搬瓦工官网，因为性价比高，一年也就十几刀，速度快。 如何拿到搬瓦工优惠码之前说过，可以看这里：拿到搬瓦工优惠码 2.远程连接工具我一直用的是 SecureCRT , 当然你也可以使用其它的 SSH 工具。 开始搭建 IPsec/L2TP VPN获取搬瓦工服务器的ip，端口，账号密码有了搬瓦工服务器的IP地址和端口我们就可以连接了： 搭建 IPsec/L2TP VPN 账号是root，密码可以在这里获取： 搭建 IPsec/L2TP VPN 使用 SSH 工具连接到服务器 搭建 IPsec/L2TP VPN 使用 IPsec/L2TP 脚本搭建在这里感谢hwdsl2提供的脚本，我们在连接到服务器后使用如下命令： 安装 wget ： yum install wget 使用脚本： wget https://git.io/vpnsetup-centos -O vpnsetup.sh &amp;&amp; sudo sh vpnsetup.sh 稍等一会安装成功会提供一个 VPN 需要的信息： Server IP: xxx.xx.xx.xx IPsec PSK: xxxx Username: xxxx Password: xxxx 这时候就搭建成功了，快吧？ windowns 7 使用IPsec/L2TP VPN设置VPN连接单击开始菜单，选择控制面板。 进入 网络和Internet 部分。 单击 网络与共享中心。 单击 设置新的连接或网络。 选择 连接到工作区，然后单击 下一步。 单击 使用我的Internet连接 (VPN)。 在 Internet地址 字段中输入你的 VPN 服务器 IP。 在 目标名称 字段中输入任意内容。 选中 现在不连接；仅进行设置以便稍后连接 复选框。 单击 下一步。 在 用户名 字段中输入你的 VPN 用户名。 在 密码 字段中输入你的 VPN 密码。 选中 记住此密码 复选框。 单击 创建，然后单击 关闭 按钮。 返回 网络与共享中心。单击左侧的 更改适配器设置。 右键单击新创建的 VPN 连接，并选择 属性。 单击 选项 选项卡，取消选中 包括Windows登录域 复选框。 单击 安全 选项卡，从 VPN 类型 下拉菜单中选择 &quot;使用 IPsec 的第 2 层隧道协议 (L2TP/IPSec)&quot;。 单击 允许使用这些协议。确保选中 &quot;质询握手身份验证协议 (CHAP)&quot; 复选框。 单击 高级设置 按钮。 单击 使用预共享密钥作身份验证 并在 密钥 字段中输入你的 VPN IPsec PSK。 单击 确定 关闭 高级设置。 单击 确定 保存 VPN 连接的详细信息。 添加注册表新建一个TXT文件，输入以下内容： Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\services\\RasMan\\Parameters] &quot;ProhibitIpSec&quot;=dword:00000000 [HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\PolicyAgent] &quot;AssumeUDPEncapsulationContextOnSendRule&quot;=dword:00000002 另存为.reg格式的文件，然后双击。 启动服务将以下服务全部设置为自动启用，要不然会连接不成功： IPsec Policy Agent Routing and Remote Access Remote Access Auto Connection Manager Remote Access Connection Manager Secure Socket Tunneling Protocol Service 重启电脑后连接重启电脑后，点击右下角的网络连接，双击VPN连接，即可成功连接： 搭建 IPsec/L2TP VPN 连接效果 搭建 IPsec/L2TP VPN iPhone/iPad 使用IPsec/L2TP VPN进入设置 -&gt; 通用 -&gt; VPN。 单击 添加VPN配置...。 单击 类型 。选择 L2TP 并返回。 在 描述 字段中输入任意内容。 在 服务器 字段中输入你的 VPN 服务器 IP。 在 帐户 字段中输入你的 VPN 用户名。 在 密码 字段中输入你的 VPN 密码。 在 密钥 字段中输入你的 VPN IPsec PSK。 启用 发送所有流量 选项。 单击右上角的 存储。 启用 VPN 连接。 搭建 IPsec/L2TP VPN 搭建 IPsec/L2TP VPN 其它客户端连接方式请参考：配置 IPsec/L2TP VPN 客户端 参考文章IPsec VPN 服务器一键安装脚本 自己搭建VPN服务器 使用搬瓦工快速搭建自己的VPN","tags":[{"name":"vpn搭建","slug":"vpn搭建","permalink":"https://www.wistbean.com/tags/vpn搭建/"},{"name":"搬瓦工搭建vpn","slug":"搬瓦工搭建vpn","permalink":"https://www.wistbean.com/tags/搬瓦工搭建vpn/"},{"name":"IPsec/L2TP","slug":"IPsec-L2TP","permalink":"https://www.wistbean.com/tags/IPsec-L2TP/"}]},{"title":"通过互联网赚取你的第一桶金","date":"2018-08-09T17:45:26.000Z","path":"make-money.html","text":"内容通过互联网赚钱的 9 种渠道 肯定会电台相关肯定会电台肯定会电台RSS订阅","tags":[{"name":"互联网","slug":"互联网","permalink":"https://www.wistbean.com/tags/互联网/"},{"name":"肯定会电台","slug":"肯定会电台","permalink":"https://www.wistbean.com/tags/肯定会电台/"},{"name":"赚钱","slug":"赚钱","permalink":"https://www.wistbean.com/tags/赚钱/"}]},{"title":"你的个人隐私被泄露了，咋办？","date":"2018-08-09T17:45:26.000Z","path":"personal-data.html","text":"内容概要个人隐私泄露现象微博被自动关注了不认识的账号淘宝自动收藏了商品老是收到垃圾短信QQ无缘无故进了陌生群事件北京瑞智华胜公司窃取 30 亿条个人信息，非法牟利千万元阿里巴巴安全部协助警方破获了一起数据窃取案件我们的信息怎么被泄露的呢？这些公司和运营商们合作中，截取到了用户的 cookie 权限cookie用户上网过程中都会产生cookie网站辨别用户身份而存储在用户本地电脑的数据####### 记录用户凭证 ####### 记录用户上网行为 数据上网行为在登录过的网站中的账号密码谋取利润导粉刷量恶意推广我们应该警惕账号被盗个人财产安全生活受到不必要的麻烦信息被卖我们应该怎么做？别以为网络是虚拟的你就很安全使用APP的时候非必要的权限不要开启开启的权限只在应用运行的时候授权密码不要都设置成一样的，也不要设置的过于简单,防止被人撞库和暴力破解推荐使用密码管理器lastpasshttps://www.lastpass.com/zh安装插件设置主密码天下没有免费的午餐，免费的WIFI不要随便连在网上尽量用昵称，能不填真实信息就不填真实信息手机拍照关掉定位功能，因为你如果没关掉的话，发给别人看的照片人家能清楚的知道你是在哪里拍的iphone用户在设置–隐私–定位服务–相机–关闭对不太信任的软件使用虚拟机运行搭建个VPN代理访问不要贪小便宜，办理正规的宽带肯定会电台相关肯定会电台肯定会电台RSS订阅","tags":[{"name":"互联网","slug":"互联网","permalink":"https://www.wistbean.com/tags/互联网/"},{"name":"肯定会电台","slug":"肯定会电台","permalink":"https://www.wistbean.com/tags/肯定会电台/"},{"name":"个人隐私","slug":"个人隐私","permalink":"https://www.wistbean.com/tags/个人隐私/"}]},{"title":"找到你要的资源，Google高级搜索技巧","date":"2018-08-02T17:45:26.000Z","path":"google-search.html","text":"内容概要拼多多假货LV 包包 175元addidas的裤子49元估价下跌最高跌幅超10%上市发行价压在 19 美元吸引用户主打低价走劣质产品的擦边球拼团砍价观点对于三四线城市的用户花更少的钱买到幸福感不过拼多多在两年半的时间内做到上市，市值300亿美金这是一条牛逼的数据。虽然我也很烦很多人在我微信推砍价的链接，但是不否认人家对目标用户的切入和需求把握的很好，对营销的裂变等模式做的很成功。喜欢hiphop态度真实google阉割版根据手机壳颜色更换app主题颜色打起来了段子根据手机壳换APP主题颜色那么？这就打起来了？根据用户的内裤颜色换APP主题颜色才叫难解决方案强制启动手机前置摄像头，对用户眼角膜的手机倒影进行图像分析，得到手机的外壳颜色和内裤厂商合作，每条内裤有着唯一的编号，内裤中放置微型感应器，当内裤贴近皮肤时， 感应器自动将编号数据发送给手机，从而获取用户内裤信息，改变主题颜色 买个私人卫星实时监测用户手机可颜色观点谷歌通过NFC触点实现。采用了 Google Earth的主题，可以每天从谷歌地球抓取新的地貌场景当做手机壁纸，同时还可以点击快捷键获取有关于这个地点的信息我觉得除了 NFC 外，最简单的还是写个接口询问用户手机壳是什么颜色得了，用户没傻逼到那种程度。其实这是一个段子，但是这么多人在传这个视频，也说明了程序员和产品经理在沟通和信任上普遍存在的问题，希望能 peace and love 吧， skr肯定会电台相关肯定会电台肯定会电台RSS订阅","tags":[{"name":"互联网","slug":"互联网","permalink":"https://www.wistbean.com/tags/互联网/"},{"name":"肯定会电台","slug":"肯定会电台","permalink":"https://www.wistbean.com/tags/肯定会电台/"},{"name":"Google","slug":"Google","permalink":"https://www.wistbean.com/tags/Google/"}]},{"title":"编程人生中的两个小经验","date":"2018-07-12T13:55:11.000Z","path":"programing-experience.html","text":"怎么让自己比别人牛逼一点点？其实说实话，现在不管是培训出身还是院校出身，现在开始去互联网公司上班，相对来说起步有一点晚了，工作也没有以往那么好找了。 不过你应该可以看到一个普遍的现象，就是现在大多的程序员在编程的时候，所借助的资源大部分来源于百度，CSDN博客，还有一些其它的论坛。 不是说这些不好，只是大部分质量参差不齐，有些博客抄来抄去，你很难去费很多时间精力去筛选，去辨别。 那么这个时候应该怎么办呢？最好的方式就是走比别人相对难一点点的路，怎么说呢？就比如别人在百度的时候，你已经花了点钱自己搭了个vpn上google搜索第一手资料，别人在看国内的博客的时候，你已经一边翻译一边看着官方文档，虽然很多英语都不懂，但是如果坚持一点一点坑下去的话，其实差距慢慢就拉开了。当别人还在把遇到的报错截图发给别人问怎么办的时候，你已经学会试着看看源代码别人是怎么写的。你会去github上pull跟自己最近水平相当的项目进行学习了等。 这以上举的例子要说明的就是：虽然起步比别人晚，但是不代表结果就是人家先到终点，别人在一小步一小步的走甚至停留在原地的时候，我们可以让自己的步伐跨的大一点，也就是提高自己的起点，当然刚开始很难，但是能够转变这种思维，一直坚持下去的话，到时候回头看的时候，才发现，原来你已经走了这么远了，而别人，还在原地。 选择是很重要，但是要学会选择很难我们都知道，选择比努力重要，如果你一不小心选择错了方向，那么很可能就南辕北辙了，这是非常不值当的，如果能在对的方向努力下去，那么有一天才能收获你的果实。举个不恰当的例子：你去追一个女孩子，人家对你一点兴趣都没有，你一个劲的给对方自以为的感动，人家只会觉得很烦，离你越远越好。 所以选择是很重要的，你需要要有辨别能力，需要对信息有足够的敏感度，比如现在新手，想要开始学编程，从事互联网的事业，那么选择什么方向呢? 是Android，还是iOS，还是java，还是 python？ 如果这时候你没有一个好的选择，真的不同的努力结果差别会很大。 就拿 Android 和 python 来说，现在 Android 开发已经没有那么火了，为什么？市场已经很饱和了，而且现在Android对中高级的人才需要比较多，而如果你现在开始学Android，学个一两年，到时候可能你已经算是Android中级开发者了，可是人家不需要了。 而现在的人工智能，数据分析，区块链等都是趋势，这时候 python 借势火了一把，很多公司都需要 python 的人才了， 所以从现在来说，一个学习 Android，一个学习 python，一年后，谁更容易找到工作，谁更被需要？ 答案肯定显而易见了。 选择是很重要，但是要学会选择很难，因为你需要信息的敏感认知，而这些信息不是说你看书就能找到了，你需要有自己的圈子，有一个环境，有一个耳渲目染的地方，而这些，除了靠自己的人品之外，还需要自己多提升自己，打入更大的圈子，去学习，去交流。","tags":[{"name":"个人提升","slug":"个人提升","permalink":"https://www.wistbean.com/tags/个人提升/"},{"name":"编程","slug":"编程","permalink":"https://www.wistbean.com/tags/编程/"},{"name":"关于wistbean","slug":"关于wistbean","permalink":"https://www.wistbean.com/tags/关于wistbean/"}]},{"title":"使用搬瓦工快速搭建自己的VPN","date":"2018-06-10T09:06:26.000Z","path":"banwagong-vpn.html","text":"1.使用搬瓦工搭建自己的VPN很多人想要使用 VPN ，不过去购买第三方的「VPN账号」除了不稳定外还怕不安全，有些第三方 VPN 会获取用户的数据做一些坏事，还特么限制网速，不能忍！ 所以想要自己买一台服务器，然后搭建一个完全属于自己的 VPN ，稳定快速又安全！ 那么就在这里教大家使用搬瓦工官网（性价比很高的云服务器提供商）来快速的搭建自己的VPN。而且我还会告诉大家怎么花比别人少的钱购买服务器，下文将会提到怎么获取优惠码，一般人很少知道的！ 2.使用搬瓦工搭建VPN前的准备 一台可以上网的电脑。 支付宝或者PayPal账号， 搬瓦工支持支付宝付款。 3.购买搬瓦工VPS云服务器3.1选择搬瓦工VPS服务器点击搬瓦工官网进入搬瓦工官网（待会在这里可以从中拿到优惠码）。进入之后可以看到可以购买的VPS云服务器，个人使用的话购买最便宜的就好了，比如这里有个19.99刀一年就不错: 使用搬瓦工搭建VPN 不过便宜的很抢手，很快就会被人买光，比如这里 no stock 就说明被人买光了： 使用搬瓦工搭建VPN 3.2拿到搬瓦工优惠码ok，我们点击「Order KVM」: 使用搬瓦工搭建VPN 当你进到这个页面的时候呢，别急着点击「Add to Cart」添加到购物车，这里面暗藏着一个优惠码，很多人不知道，使用浏览器查看源代码，chrome浏览器的话按F12，然后搜索「code」，你会发现有一个 「Try this promo code: xxxx 」，这个xxxx就是优惠码，你把他复制下来，待会有用。 使用搬瓦工搭建VPN 页面的 Location 就是选择服务器的地址，到时访问谷歌的时候会显示你当前访问的地址。好了，我们点击「Add to Cart」。 接下来，进入结算页面，我们刚才复制的优惠码就派上用场了，将你刚刚复制的优惠码复制进去然后点击 「Validate Code」，看！是不是优惠了！一般人不知道这种操作: 使用搬瓦工搭建VPN 接着点击「CheckOut」完成付款即可。付款的时候选择 Alipay 就可以使用支付宝付款。 使用搬瓦工搭建VPN 4.快速搭建搬瓦工VPN购买完毕后你就拥有一台你自己的服务器了，接着点击Services下的MyServices，可以看到你的服务器： 使用搬瓦工搭建VPN 我们点击「KiwiVM Control Panel」进入管理界面： 使用搬瓦工搭建VPN 可以看到你服务器的信息: 使用搬瓦工搭建VPN 接着我们点击 「OpenVPN Server」： 使用搬瓦工搭建VPN 接着点击：「Install and configer OpenVPN Server」，搬瓦工会自动帮我们在服务器安装和配置，不需要自己手动敲命令了： 使用搬瓦工搭建VPN 等一会就搭建好VPN了，就问你快不？ 使用搬瓦工搭建VPN 5.使用搬瓦工openVPNPC端使用搬瓦工VPN首先我们下载我们的VPN文件所需的配置文件，点击「Download key Files」下载，然后再下载openVPN的客户端： 使用搬瓦工搭建VPN 接着将配置文件解压到openVPN客户端的config文件夹下： 使用搬瓦工搭建VPN 使用搬瓦工搭建VPN 接着再openvpn目录下的bin目录双击打开openvpn-gui，然后Connect连接，连接完成右下角的openVPN会成为绿色状态，然后就可以访问外网了，速度很快： 使用搬瓦工搭建VPN 使用搬瓦工搭建VPN 使用搬瓦工搭建VPN iPhone端使用搬瓦工VPN同样，手机也需要安装一个openVPN的客户端，不过你在中国区的 AppleStore 下载不到 openVPN 的，你需要注册一个美区的苹果账号，然后搜索 openVPN 下载： 使用搬瓦工搭建VPN 接着电脑端下载 iTunes ，打开 iTunes ，手机用数据线连接电脑，点击文件共享： 使用搬瓦工搭建VPN 将刚刚下载的vpn文件解压，然后添加到OpenVPN客户端： 使用搬瓦工搭建VPN 手机打开OpenVPN APP， 点击 + 这个按钮： 使用搬瓦工搭建VPN 然后就可以连接了： 使用搬瓦工搭建VPN 访问速度杠杠的： 使用搬瓦工搭建VPN 使用搬瓦工搭建VPN Android端使用搬瓦工VPNAndroid手机使用搬瓦工openVpn同上，下载openVpn App ，然后把配置文件传上去就行了。 相关文章 CentOS快速搭建一个属于自己的IPsec/L2TP VPN 利用搬瓦工VPS自建高速丝滑VPN 在搬瓦工中搭建个人vpn","tags":[{"name":"搬瓦工","slug":"搬瓦工","permalink":"https://www.wistbean.com/tags/搬瓦工/"},{"name":"vpn搭建","slug":"vpn搭建","permalink":"https://www.wistbean.com/tags/vpn搭建/"},{"name":"搬瓦工搭建vpn","slug":"搬瓦工搭建vpn","permalink":"https://www.wistbean.com/tags/搬瓦工搭建vpn/"}]},{"title":"Linux 学习启动篇","date":"2017-03-31T09:25:18.000Z","path":"satrt-learning-linux.html","text":"从这篇文章起，就意味着开始着手学习使用Linux系统了，虽然经常听到Linux操作系统，但是或许正在着手去操作使用的人还是少数的，甚至连什么是Linux都不知道的人也大有所在。那么这篇 「Linux学习启动篇」 将从0开始，首先了解Linux是干嘛的？能在Linux上做些什么事情？接下来再和我一起深入学习！ 1.什么是LinuxLinux是一种自由和开放源代码的类UNIX操作系统。 Linux是自由开放源代码的，这个系统的内核是由「Linus Torvalds（中文名：林纳斯·托瓦兹）」在1991年10月5日发布的，其实Linux本来指的是Linux内核本身，但是通常都用了「Linux内核」来称呼，而Linux就代表了 Linux内核 + 用户空间的应用程序 构成的完整操作系统。 2.开源协议Linux如此受欢迎的其中一个原因就是它开源，这意味着任何个人或者机构都可以很自由的使用Linux里面所有的源代码，你可以对它进行修改生成新的版本然后再发布出来成为你的东西。但是前提是遵循「GUN GPL协议」。 GUN GPL(GUN General Public License)，通用公共许可协议，这是由理查德·斯托曼发起的，许多自由软件和开放源码都采用了这个协议条款，任何个人或者机构使用基于GPL进行衍生发布时必须采用GPL协议许可，而且需要公开源代码。 3.Linux使用领域「服务器领域」： Linux已经在服务器领域占了大半壁江山，随着开源软件的日益强大，Linux服务器操作系统已经越来越多人使用。应该很少人会用windows server了吧。 Linux发行版一直被用来作为服务器的操作系统，并且已经在该领域中占据重要地位。根据2006年9月Netcraft的报告显示，十个最大型的网络托管公司有八个公司在其Web服务器运行Linux发行版。Linux发行版是构成LAMP（Linux操作系统，Apache，MySQL，Perl / PHP / Python）的重要部分，LAMP是一个常见的网站托管平台，在开发者中已经得到普及。 「移动设备嵌入领域」： Linux的低成本、强大的定制功能以及良好的移植性能，在智能手机、平板电脑等移动设备方面，Android手机就是Google开发的基于Linux平台的开源手机操作系统。现在市场上Android手机仍然是占了最大的移动操作系统份额。阿里云的YunOS系统也是基于Linux的，越来越多的系统都使用了Linux。 「桌面领域」： 现在大多数在Windows平台上广泛使用的自由软件都有相应的Linux版本，现在Linux桌面系统的发展也是越来越多了，像国内的红旗Linux，深度Linux，还有你可能经常听到的Ubuntu系统，都是基于Linux的桌面操作系统。 目前能在Windows或Mac OS上运行的应用软件大部分都没有Linux的版本，不过在Linux平台上通常可以找到类似功能的应用软件。大多数在Windows平台上广泛使用的自由软件都有相应的Linux版本，例如Mozilla Firefox、Apache OpenOffice、Pidgin、VLC、GIMP；部分流行的专有软件也有相应的Linux版本，如Adobe Flash Player、Adobe Reader、Google Earth、Nero Burning ROM、Opera、Maple、MATLAB、Skype、Maya、SPSS、Google Chrome。 4.Linux发行版Linux的发行版实在太多了，这里列举几个常见的发行版本。 Debian GNU/Linux 7.0： debian Gentoo Linux 12.0： Gentoo Linux Mint 14： Linux Mint 14 Fedora： Fedora Ubuntu： Ubuntu 以上列举的这几个都是有桌面版的，但是我们学习Linux主要还是对命令行进行学习，对于学习和使用的系统我们选择不是以上这几个，而是centOS系统，那么为什么选择centOS？ 5.选择centOS版本进行学习早前 Red Hat公司 就发行了「Red Hat Linux」的个人版本，到了Red Hat 9.0版本后，Red Hat公司就不再发行桌面版的发行套件了，Red Hat Linux 也就停止了开发，而开始全力集中转向服务器版本上，也就是Red Hat Enterprise Linux（企业版本）。 后来 Red Hat Linux 的桌面版本与来自开源社区的Fedora进行合并，Red Hat Linux 桌面版就称为了 Fedroa Core。 所以目前Red Hat有：免费的Fedroa Core版本，也有收费的Red Hat Enterprise Linux版本。Red Hat Enterprise Linux都会在Fedroa Core版本的基础上进行升级，大约发布6个Fedroa Core版本就会发布一个Red Hat Enterprise Linux版本。 因为之前我们讲过了，Red Hat的企业版本虽然收费的，但是它依照开原协议必须公开源代码，那么这个是时候CentOS就出现了，它的全名是（Community Enterprise Operating Systeam 社区企业操作系统），centOS和Red Hat企业版本的不同之处在于centOS没有包含封闭源码的软件，所以centOS可以自由使用，而且可以长期的享受它的免费升级和服务。 所以选择centOS版本进行学习是很有必要的：目前网络上80%的Linux资源都是基于centOS的发行版的，可以供我们更多的资源查找和学习帮助。centOS版本在许多开源镜像网站可以轻松获取。centOS也具有经典性和代表性，绝大多数物联网公司的后台服务器都使用的是centOS发行版本。 所以综上：选择centOS版本是比较好的。接下来就和我一起学习Linux吧，就从安装虚拟机开始，如何？","tags":[{"name":"教程","slug":"教程","permalink":"https://www.wistbean.com/tags/教程/"},{"name":"Linux","slug":"Linux","permalink":"https://www.wistbean.com/tags/Linux/"}]}]