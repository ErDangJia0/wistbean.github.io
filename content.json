[{"title":"python3 趣味教程","date":"2018-09-01T09:07:44.000Z","path":"2018/09/01/python-tutorial/","text":"pick up Python给大家说一下，我要开始学习 Python 了， Python 最近很火嘛（小样，别太膨胀），不过还好我是个程序员，只不过之前玩的不是 Python 语言，所以接下来我要 pick up Python了。是的，没错，pick up，以后你告诉别人说你要学 python，你可以很装逼的告诉他：“老子要pick up Python了！” 人生苦短，我特么要pick up Python~~~ 而这里呢，和其它的学习 Python 的号不一样，不会乱七八糟，我会形成一个体系，也就是 Python 从0到1的整个体系，而且我也不想严肃，我要让我的这个号呢，看起来好笑，好笑之中又能真正的学到Python的精髓，所以我会下功夫去学习，去消化，然后再转化成风趣幽默的文章，让大家看起来像看小黄文一样轻松，这是我想做的事情。 听到小黄文，想想还有点鸡动呢 (你可别乱来啊！) 为什么要学 Python对了，还没告诉你为什么要学 Python 呢，我来说说这几点就已经足够： Python 现在 Python 已经成为世界上最流行的编程语言之一了，而且大部分的Linux系统，MacOS系统都直接内置了 Python ，就问你牛逼不？ 现在连小学生都开始学习 Python 了，Python 已经纳入了某地区小学的教材了。Pyhon 已然成为了编程界的 “网红”，现在程序员们可能不知道Cobol，Basic，Pascal，Perl，Ruby，但没有一个程序员不知道Python的。 上手简单，现在很多从来没接触过编程的人都着手开始学习Python 了，我有一朋友，之前没有任何编程基础，学了半年多找到了份工作，工资12k妥妥的，不过不要去羡慕别人的数字，人家背后的努力你没看到而已，如果你现在也是没有任何基础或者想要从0学习 Python ，那么你来对地方了！因为人生苦短，我们一起搞 Python。 web开发，科学计算，3D建模，人工智能，嵌入式开发，云计算，大数据等等都特么能看到Python的身影，不知道你知不知道NASA（美国宇航局）使用Python来开发用于系统集成和卫星，火箭的测试自动化么？还有网易，腾讯，搜狐，金山，豆瓣，YouTube ，google，雅虎（太多，举例不完）都在用Python。所以这么牛逼，何不 pick up python 呢？ 用 Python 可以做很多事情，可以爬取你想要的数据，可以做外挂，之前的微信跳一跳，12306抢票等都可以用Python实现，还有很多数据分析，项目系统，聊天系统，游戏等等多了去了。所以这么牛逼，何不 pick up Python 呢？ 是不是真的啊？又想骗我学习~ 不妨再来看下Python官网的介绍，他说这些是使用Python的人宁愿不使用其他任何东西的一些原因： python Pyhon很牛逼…而且很快； 可以和别人一起P； 在哪都可以搞； 非常友好&amp;学习简单； 开放。 好棒！我要pick up Python了，接下来将是学习python的正确势！ 别怕，Python 不是蟒蛇PS：虽然 Python 的中文意思是「蟒蛇」，但是 Python 语言的创造者 Guido van Rossum 是因为超喜欢英国广播公司的节目「蟒蛇飞行马戏」而命名这个语言的，所以你可别以为Python 创造者是个喜欢蟒蛇的怪叔叔。 python 创始人 Python : Hello World !不管学什么编程语言，在一开始入门的时候，都会从「Hello Wrold」开始，这已经成为编程界的不成文规定。 在1972年的时候，有个叫科比 布莱恩的人使用B语言撰写了第一个使用参数的 Hello World 相关程序。说明一下：此科比非彼科比，这哥们当然不是我的那位打NBA的偶像啊！ 如果科比不打NBA而去编程，会是怎么样呢？ 科比：你们给我悠着点！！ 看下图！这就是由 科比 布莱恩 撰写的「Hello Wrold」程序： Hello Wrold 自此，Hello World 成为了计算机程序员学习新的编程语言的传统美德！ 当然说到传统美德，尊老爱幼也是必须的。其实我现在发现大多数年轻人素质都比较高，反而是那些年长的老人，倚老卖老，所以以后问路尽量找年轻人。 那么，我们学习 Python 也从「Hello World」开始吧！ 安装 Python如果你用的 Mac 或者 Linux 的话，那么你就不需要安装了，因为系统已经内置 Python 了，如果是 Windows 系统的话，安装也很简单，比安装 LOL 英雄联盟还简单。所以我相信不用我说，你也知道怎么安装，如果你连软件都不会安装，那么可以不用关注我了。 说的好屌啊，不知道是不是真的？ 你可以直接访问 Python 的官网 下载最新的版本。 下载 python 在这里告诉一下完全没经验的朋友们，千万不要去百度搜索 python 下载，然后去到类似这样的地方下载： 别在这里下载 python 因为这样做很容易被人骂傻逼的。 听说现在骂百度是一种正确的价值观！ 开始玩耍已经安装好Python之后呢，你可以在命令行里面输入「python」，然后你就会看到这样的东东： python 版本 有没有看到三道杠杠 「 &gt;&gt;&gt;」。是不是突然想到小学的时候，那些受老师爱戴，学生中的好榜样的队长袖口上的三道杠！ 三道杠，怕不怕 大队长和大队委，牛逼牛逼，社会社会。 不过在 Python 这里呢， &gt;&gt;&gt; 是一个提示符来的，也就是在它后面可以输入一些内容，更确切的说，这是交互式Pyhon解释器接收内容的符号。 比如我们要 Python 给我们打印 Hello World 的字样，那么你就可以这样子：在 “三道杠” 后面输入 print (“Hello World”) , 然后用力按一下回车键，你就可以看到 Python 解释器打印出 Hello World 这样的字符串了： Hello World 当然仅仅是打印 Hello World 你可能觉得没什么牛逼的，但是这不是才入门么，想要做更多有趣的事情么？跟着我一步一步来！ Pythoner ：挑选一个Python编辑器各位 Pythoner 好啊！在这个烦躁的时代，相聚就是缘分，很高兴各位 Pythoner 能相聚于此，希望接下来的路，我们一起走下去，使用 Python 来做一些有趣的事情，有意义的事情。 我们在玩游戏的时候，我们通过层层努力的打怪升级，为的是什么？是女人么？是金钱么？ 当然不是，我们有那么肤浅么？我们为了能够拥有更牛逼的装备。 老话说的好：工欲善其事必先利其器！你的武器越牛逼，你的女人就越能够对你服服帖帖的。 所以，我们在使用 Python 来编程的时候，我们也需要一个牛逼的武器，来编写我们的代码 —— 编辑器！ 在这里跟大家说一下现在市面上比较主流的 Python 编辑器供你参考，要知道，适合自己的才是好的。如果你的丁丁很小，使用再大 size 的套套也是白搭！ Sublime Text Sublime Text Sublime Text 比较适合 Python 新手使用，Sublime Text支持跨平台，而且可以使用其丰富的插件和主题。各种语法高亮和代码补全，整体看起来挺舒服的，而且主题配置起来也不难。 IDLE IDLE 如果你是 Windows 系统可以使用 IDLE, 它是 Pyhton 自带的一款编辑器，所以刚开始也可以使用它来玩玩，IDLE具备语法高亮功能，还允许你在IDLE中运行你的程序。许多事情它会自动帮你处理。比如debug什么的。 VIM VIM Vim是一款强大的编辑器，如果你熟练使用 Vim 的话，那么你完全可以脱离鼠标，双手在键盘上像弹钢琴那般酸爽，不过 Vim 需要一定的学习成本，需要花点时间去研究一下各种快捷命令和插件的使用，但是从长远来看，这都是大有所益的。 PyCharm PyCharm 我个人比较中意这个，如果你使用过 IntelliJ IDEA 的话，你应该会对其爱不释手，而这款 PyCharm 也是出自同一家公司，用起来会很顺手，现在很多公司，如Twitter，Groupon，Spotify，eBay和Telefonica等都在用 PyCharm 。不过你使用它的专业版需要花钱购买。 Emacs Emacs Emacs 在 python 开发界也很受欢迎，它是一款开源的编辑器，支持插件扩展，可以配置一个 python 集成开发环境， Emacs 不仅仅是一个编辑器，他是一个整合环境，可以说是一个集成开发环境。 ok，就推荐这几个市面上比较流行的编辑器，当然还有其他的编辑器，最适合自己的才是最好的，用起来顺手不尴尬才爽嘛~ 在这里给点建议就是新手可以先上手使用 IDLE 和 Sublime Text ，Vim是一款强大的编辑器，没事花点时间研究下，相信我，真的会受益匪浅的。 自己写一个 Say Hello 的 python 程序是不是觉得我特么才安装了 Python 软件，这么快我就可以写出 python 程序了？ 先别怀疑着先，一开始我就说了，Python语言简单，上手快，所以你跟着我呢，一步一步来，准没错的。 又他妈的不要脸了！ 通过 Pythoner ：挑选一个Python编辑器相信你已经知道使用什么样的编辑器了，因为这里力求从0到1，做一个完整 python 的体系，所以现在就先用 IDLE 这个编辑器，到时候你越来越牛逼了，咱们再换编辑器，没毛病。 好了，别废话了，快点带我写程序啊！ 这个Python程序可以干嘛首先我们来想一下我们这个 Python 程序可以干嘛？ 可以让我们输入名字； 可以跟我们输入的这个名字say Hello！ ok，我们要达到以上的功能，咱们说干就干！ 开始编写第一个python小程序打开我们的编辑器： IDLE编辑器 现在的它是处于交互式解释器的状态，如果我们现在在这个交互解释器编写代码，那等下关掉所有的代码就不见了，我们当然是想要能够写出一个自己和别人都能够运行的程序，怎么能说代码丢掉就丢掉呢？ 我的小九九都被你发现了，是不是我的pp一抬，你就知道我是要拉尿还是拉shit。 那么我们就使用快捷键「Ctrl + N」来新建一个编辑窗口，可以看到这里没有「三道杠」提示符了吧，我们在这里写的代码待会可以保存，爱在哪里运行就哪里运行。 IDLE编辑器 我们刚刚说了，想要这个程序可以让我们输入名字，那么我们可以用一个叫做 name 的变量来接收别人输入名字，可能你现在不知道变量是什么鬼，但是没关系，你现在把它理解为是一个桶，这个桶可以来存放用户输入的名字就好了，往后我会告诉你变量的使用，别急，咱们慢慢来。 ok，那么我们就可以写我们的第一行代码了： 1name = input (\"你他妈叫什么玩意儿？\") 解释一下这行代码的意思，input 是输入的意思，而「你他妈叫什么玩意儿？」就是显示给用户看的提示语。 我们已经完成了第一点，也就是这个程序可以让我们输入名字，那么我们继续完成第二点，可以跟我们输入的这个名字say Hello！ 那么很简单，我们只要再写一行代码即可： 1print(\"Hello\" + name) 解释一下这行代码的意思， print 就是打印的意思，你可以理解为信息的输出，我们已经知道 name 这个 “桶” 已经装了用户输入的名字，所以 “Hello” + name 就是会输出 Hello xxx！ IDLE编辑器 ok，我们已经写完代码了，我们「Ctrl + S」保存一下文件到桌面，你可以把它命名为「Hello.py」。 接着我们就可以来运行我们的程序了，在我们的 IDLE 中用力的按一下 F5 开始运行程序： IDLE编辑器 可以可以~ 看到木有，我们的程序完成了。是不是挺好玩的！慢慢来，我们到时就可以写游戏，写网站，写爬虫了，是不是想想还有点小激动呢？ 持续更新中，敬请期待！ 参考文章 Python 基础教程| 菜鸟教程 Python教程- 廖雪峰的官方网站 python基础教程_w3cschool","tags":[{"name":"教程","slug":"教程","permalink":"http://www.wistbean.com/tags/教程/"},{"name":"python","slug":"python","permalink":"http://www.wistbean.com/tags/python/"}]},{"title":"通过互联网赚钱的 9 种渠道","date":"2018-09-01T07:28:10.000Z","path":"2018/09/01/make-money-on-the-internet/","text":"我一直很庆幸能活在这个互联网的时代，给我们带来太多的便利，就像你现在看到的这篇文章，我把文字码出来，转化为 bit 信息，通过互联网秒传到你眼前。 互联网不仅给我们提供诸多的生活便利，还能让我们从中赚到钱。 谈到钱，有些人会觉得很俗，好像钱不应该拿上台面说似的,觉得丢人。 我倒不觉得，首先我承认我爱钱，我觉得钱可以给我带来物质上的基本需求满足，如果连最基本的物质都没有，谈什么理想。 互联网赚钱 君子爱财，取之有道就行了，所以在不犯法不违反道德的前提下，所有通过自己努力赚到的钱，我都不觉得丢人。 真正丢人的是那种表面一套，背地里一套的人。 接下来就来给大家分享一下通过互联网赚钱的 9 种方式，相信如果你动动脑筋，付出点时间精力，每个月赚点零花钱，买个范冰冰版的充气娃娃啥的不成问题。 文章投稿现在是新媒体的发展迅猛，像微信说的：「再小的个体，也有自己的品牌」。所以现在很多新媒体公司都需要文案，如果你有一定的写作能力的话，不妨去找些 大v 投稿，看你的文章质量，一般 1000 字有两三百块钱。读书那会我就有投过稿，写了篇技术文，赚了 150 块钱，当时开心的不要不要的。 后来还有人找我入驻他们的平台，写写区块链的文章，给我虚拟币。但是我拒绝了 - - 互联网赚钱 头条号、Youtuebe以前，互联网还没普及的时候，人们大多都是通过电视去获取信息，那会电视明星就是现在所说的大V，但是现在互联网普及了，那些通过直播的，做视频的顺势而为，成为了草根明星,他们也赚了好多钱。但是不是说只有 大V 才能在网络上赚钱，今日头条有个叫头条号的平台，你可以在上面写文章，上传视频，头条号会帮你投放广告，如果多人看你的视频或者文章，那么你就可以获取广告费。 教大家一个套路，之前我试了一下，去 YouTuebe 找了一个热门视频，把视频抓取下来然后发到头条号上，结果有 330k+ 的播放量，通过头条号的广告获得了 50 多元，不过我后来就没玩这个了，主要因为没时间去找视频啥的，如果你是个学生党可以去操作一下，每天赚点零花钱还是不错的。 互联网赚钱 Youtuebe 也是同样的道理，如果你有什么 idea 制作成视频，上传到 Youtuebe ，也会有广告分成的，前提是你有一定的播放量。 薅羊毛不知道大家知不知道国外有个叫做 PayPal 的东西，这个产品一开始获取用户的方式就是砸钱，新用户注册可以获取 $10 , 推荐一个用户可以再获取 $10 , 现在很多互联网产品一开始也是采用这种方式，比如之前很多的 P2P 产品，如今大多都暴雷，跑路了，可是一开始很多羊毛党都在这些平台薅羊毛，有些专业的羊毛党搞了很多手机号，从而薅了一笔。像之前的饿了么，美团，滴滴打车那些优惠券啥的，有人就通过获取这些优惠券拿去帮人优惠点餐，从而赚取差价，月入几w。 很多人看不起，但是人家就是把钱给赚了。 互联网赚钱 像现在知识付费时代，有很多平台有活动，通过你分享的链接让你的朋友付费加入学习，你就能从中获取一定的佣金，这也算是薅羊毛的方式。 照片卖钱照片也可以卖钱，如果你拍照技术不错的话，除了晒朋友圈之外，不妨把照片上传到类似 stockphoto 的平台，别人看到不错的照片，又很想要的话，只愿意付费购买的。这个我没玩过，因为我比较喜欢自拍。我怕卖出的价格太高。 互联网赚钱 淘宝客，affiliate你可以通过 阿里妈妈 这个平台注册成为一个淘宝客，当然其它平台也有，例如京东联盟，亚马逊的 affiliate 等，然后你就可以从里面推荐一些商品给别人，如果别人购买了你推荐的商品，相当于帮别人卖产品。那么你就可以从中获取一定的佣金，不同的商品佣金比例不同。我一朋友在上次双十一通过淘宝客赚了台mac电脑。 互联网赚钱 接单如果你是设计师，或者程序员接单应该不陌生吧，因为我是程序员出身，所以身边的朋友有时候有需求会找我做，一般给个项目估价和时间评估，然后达成合作就开干了。除了跟朋友合作之外，网上还有一些平台可以接单，不过国内的就算了，坑人的比较多，动不动就让你付费弄个会员啥的，在这里给大家推荐两个国外的平台，在这里赚的可是美金哦。一个是 upwork，一个是Freelancer，这两个平台是目前比较多人用，而且知名度也比较高的，很多人在上面发布需求，你可以在上面写好自己的profile，然后去找适合自己的项目。最好懂点英语，想想我以前一边拿着翻译软件一边跟老外聊需求就搞笑。 互联网赚钱 做产品程序员都有一个梦想，就是「Write the code. Change the world」。如果能找到用户的痛点，并且实时的推出一款应用(这也是我之后想干的事)，让用户用的爽，人家很愿意付费购买的。还有一种收入方式就是在自己的产品中投放广告，比如Google AdSense。 互联网赚钱 买币、股票理财这种理财投资方式属于被动收入了，也就是躺着赚钱，但是前提需要你有钱而且风险也很高，对于理财这方面我在学习中，投的钱不多，等过阵子有经验了再跟大家分享吧。 知识付费现在中国人有一个让国外的人惊了个呆的就是，中国人越来越喜欢和认可为知识买单，本质就在于「知识本身不值钱，但知识的表达方式、能让人懂的表达方式，非常值钱」，我的知识星球也算是知识付费的一种，如果你想做知识付费的话，你前期有付出的比你想象的要多的多，如果你还没那个执行力和责任心的话，劝你打消这个念头吧。 互联网赚钱 ok，以上，那些开淘宝店啥的就不说了，现在来说已经饱和了，不建议搞，倒不如多花点时间提升下自己。 最后希望关注我的朋友能获取到有价值的信息之外，也希望大家发大财哈哈哈。 哦对了，还有一件事，问下大家，我的手机屏幕坏了，请问哪里可以修啊？？ 互联网赚钱 相关文章 能通过互联网赚钱的网站平台有哪些？ 如何来实现自动赚钱，互联网赚钱的思维","tags":[{"name":"互联网","slug":"互联网","permalink":"http://www.wistbean.com/tags/互联网/"},{"name":"个人理财","slug":"个人理财","permalink":"http://www.wistbean.com/tags/个人理财/"},{"name":"赚钱","slug":"赚钱","permalink":"http://www.wistbean.com/tags/赚钱/"}]},{"title":"使用 hexo 从0到1搭建一个属于自己的个人网站","date":"2018-08-30T11:38:13.000Z","path":"2018/08/30/build-personal-website/","text":"为什么要有自己的个人网站呢？我觉得现在身处于互联网时代，有自己的个人网站其实就和名片差不多了，在这里可以不断的记录自己的生活，总结自己的知识，人生思考什么的，以后介绍自己直接把网站扔给对方。一来是可以装下逼，二来是可以让对方更好的了解自己。 再者就是相对的自由了，现在市面上有很多 Blog 系统，你只要注册一下，就可以直接在他们的平台生成一个你自己的blog，虽然很方便，但是你要付出的代价就是：忍受他们平台在你的blog嵌入一堆广告。受他们的限制与监管，人家不爽就随随便便删了你的文章，没商量。 比如这样： 知乎 简书 微信 爽吗？反正我是不爽。 所以自己搞一个完全属于自己的网站，相对来说，没那么苦逼。为什么说相对？ 因为我们也要看大佬的眼色啊。 但是总比被各种平台恶心好吧。也别幻想什么区块链博客系统，对于目前来说，不现实。 使用 Hexo 框架来搭建个人网站这两天我重新整理了一下自己的 Blog ，因为我之前用的是 Octopress 框架，有些年头了，一些主题和插件并不是很多。 后来对比了几个框架，发现 Hexo 不错，和 Octopress 差不多，也是可以用 Markdown 写文章，然后生成静态网站，不过主题丰富一些。 Hexo 是基于 nodejs 的,搭建起来很简单。那么接下来就说说如何从0开始搭建吧。 开始搭建 因为 hexo 是基于 node 框架的，所以呢，我们首先需要下载安装node，下载地址：nodejs 安装完之后，我们打开命令窗口，输入 node -v ，如果返回下图所示，那么就说明你安装node成功了。 node 版本 安装成功后，我们在命令行窗口运行如下命令来安装hexo： npm install hexo-cli -g 初始化博客目录： hexo init wistbean.github.io (这里的wistbean换成你自己的英文名) 初始化完成后，我们就进入我们的目录： cd wistbean.github.io 安装 npm install clean一下，然后生成静态页面 hexo clean hexo g g 就是generate ,生成的意思 把你的网站运行起来 hexo s s 就是server ,在服务器运行的意思 打开你的浏览器，输入 localhost:4000 。 自此，你的个人网站就这么速度的搭建起来了！ hexo 让你的个人网站漂亮的 blingbling 的修改你的网站中的个人信息进入你的网站目录，打开 _config 文件，这个文件是用来配置你的网站信息的。 这里列出我的简单配置，具体可以看这个文档 title: wistbean subtitle: 肯定会 description: wistbean的个人博客，主要涉及到编程（Java，Python，Linux等），个人提升学习，视频教程，《肯定会软件技术》电台节目 keywords: wistbean，肯定会，java，python，电台，教程 author: wistbean language: zh 选一个主题刚搭建完的网站，是不是觉得有点丑，不符合你的漂亮的脸庞？ 反正我是这么觉得的，那么就选一个主题来装饰一下吧，在这里可以选择你要的主题：hexo主题 下载主题选择好了你的主题之后，就可以下载主题资源了，比如我这里选择一个 NEXT 主题来演示一下： git clone https://github.com/iissnan/hexo-theme-next 这里主要就是将主题下载到我们的themes目录下。 如果你还不熟悉 Git 的使用的话，可以看看我之前的 Git 视频教程：代码托管Git的使用 配置主题主题下载完之后，在你根目录下的 _config.yml 文件中，修改 theme 为你的主题名字： theme: next 重新生成和运行hexo g hexo s 访问一下看看，是不是比之前好看多了？ hexo next主题 写上你的第一篇博客文章，打上标签和分类你已经把你的网站打扮的漂亮大方简洁惹人爱了，那么接下来就要好好去写内容了，内容才是重要的。 两种方式来新建你的博文命令形式 在你的blog目录下使用如下命令： hexo new article （这里的article写上你的文章的名称） 输入这样的命令之后你的source/_posts下就会生成一个 article.md 文件，在这个文件下就可以写上你的博客内容了。用 Markdown 的语法去写。 直接新建方式直接点的方式就是直接在source/_posts新建一个 Markdown 文件，其实和命令形式是一个道理，只不过命令形式用了命令来创建。推荐使用命令的方式，毕竟 Geek 一点。 给你的文章打上标签打标签能让你的文章方便检索。 打开标签功能： hexo new page tags 这时候你的source/下生成 tags/index.md 文件，我们将其打开，然后把它改成： type: &quot;tags&quot; comments: false 这时候你要为你的文章打上标签就可以在文章的头部写上： tags: - Tag1 - Tag2 - Tag3 给你的文章添加分类分类，归档，是你博客的特性之一。 打开分类功能： hexo new page categories 这说你的source目录下生成 categories/index.md 文件，我们将其打开，把它改成： type: &quot;categories&quot; comments: false 这时候你就可以给你的文章归类存档了，使用方式就是在你的文章的头部加上： categories: - 分类1 - 分类2 注意：标签和分类要确定你的配置文件 _config.yml 是否有打开了 tag_dir: tags 和 category_dir: categories。另外，Markdown 的语法是写作最优雅最简洁最简单的，如果之前没用过的建议去学一下Markdown 语法说明，一般一个钟左右就能掌握。因为它和HTML那样简单。 给你的文章添加评论当别人看了你的文章，有问题想跟你探讨，没评论怎么行？评论也是你的 Blog 交互的重要方式之一。 现在很多主题都内置了第三方评论的系统。比较常用的有： 多说 ：http://duoshuo.com/ 畅言 ：https://changyan.kuaizhan.com/ Valine：https://github.com/xcss/Valine Disqus：https://disqus.com/ 友言: http://www.uyan.cc/ gitment: https://github.com/imsun/gitment 自己去看一下，喜欢哪个用哪个，自己的 Blog 就是要自由。 选好你的评论系统之后，进入平台注册后，平台会给你一个 APPID和appkey。拿到这些信息到你的主题下的配置文件下设置。 以 next 主题和畅言评论为例：进入你的themes/next,打开_config.yml，定位到 changyan ，把 enable 改为 true。 changyan: enable: true appid: 这里写上你的畅言在appid appkey: 这里写上你的畅言在appkey 设置好之后，重新clean生成一下就有评论啦： hexo clean hexo g hexo s 打开你的预览连接看看你的文章下方，已经有评论功能啦。 评论 让全世界的人都认识你已经搞定了个人blog，接下来当然是要部署到网上让人家访问了，如果不想花钱，可以使用GitHub Pages，使用它就可以部署自己的网站啦。 对于 GitHub 不知道怎么用的童鞋，可以看一下我的这个视频教程：GitHub完全使用指南 创建Github pages 仓库接着创建一个 xxx.github.io 的 public 仓库，这里的xxx写你的名字，比如我写的是 wistbean.github.io,那么到时我就可以通过 wistbean.github.io 来访问我的网站了。创建完成之后，那么你就有自己的 Git 地址了。 安装 hexo-deployer-git在你的博客目录下输入如下命令： npm install hexo-deployer-git --save 配置你的Git打开你的配置文件，然后输入你的git地址： deploy: type: git repo: https://github.com/xxx/xxxx.github.io.git 推送你的网站到Github上直接输入命令 ： hexo d d 就是 deploy ， 部署上去的意思。 访问你的网站直接在浏览器输入你的 xxx.github.io 就可以访问啦！ 要有点个性，绑上你的域名有了自己的网站，当然是要自己的网址，这样才帅嘛，当然有自己的服务器就更帅了。 购买域名关于域名的购买我比较推荐去godaddy，这是国外的域名商，使用起来不错的。 绑定域名买完你的域名之后，接下来几个步骤轻松搞定： 添加 CNAME 文件在你的博客的 sources 目录下新建一个 CNAME 文件，这个文件里面就写你的域名就可以了，比如我就写： www.wistbean.com。 接着将文件push到你的GitHub上，可以使用 hexo s 命令。 在你的域名商后台进行 DNS 解析添加两条记录：1. 主机记录： @ 记录类型：A 记录值：192.30.252.154 或者 192.30.252.153 2. 主机记录： www 记录类型： CNAME 记录值： xxx.github.io (这里就是你的github仓库名称) GitHub 设置域名在你的 GitHub 设置域名，在你的 GitHub 博客项目中点击 Settings，在 GitHub Pages 下的 Custom domain 写上你的域名，然后 save。 以上，你就可以通过你自己的域名访问到你的网站啦！ 服务器搞起，完全自主权虽然你现在已经可以使用你的域名访问你的网站，但是呢，有自己的服务器托管自己的网站还是爽一点的，GitHub屏蔽了百度的爬虫，也就是说别人通过百度搜索不到你的网站，这你能忍？ 有自己的服务器的话就可以被更多搜索引擎收录，还有呢就是有自己的服务器还可以干些其它的事情。 购买服务器这里的服务器当然推荐要买国外的，这样的话你的域名就不需要备案，而且还可以搭建 VPN ，一举三得，酸爽。 服务器购买推荐使用搬瓦工，因为这是我用过觉得性价比最好的，而且呢，还可以领取到优惠码，很多人不知道的，领取优惠码可以看这里：拿到搬瓦工优惠码 使用 Nginx买了服务器之后，那么你就可以用 Nginx 来当做你网站的 web 服务器，搭建也很简单，关于Nginx搭建和配置就不多说了，如果之前没玩过可以看这里：Nginx搭建静态网页服务器 DNS解析到你的服务器在你的域名商，使用 DNS 解析，添加一条 A 记录就可以了，记录值就是你这台服务器的 IP 地址，一般启用后 30 分钟左右就可以访问啦。 以上你就完全拥有属于自己的个人网站啦。 hexo参考文章 GitHub+Hexo 搭建个人网站详细教程 hexo|文档","tags":[{"name":"个人网站","slug":"个人网站","permalink":"http://www.wistbean.com/tags/个人网站/"},{"name":"教程","slug":"教程","permalink":"http://www.wistbean.com/tags/教程/"},{"name":"hexo","slug":"hexo","permalink":"http://www.wistbean.com/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"http://www.wistbean.com/tags/blog/"}]},{"title":"「2-5」使用InteliJ IDEA 创建 Maven 聚合工程","date":"2018-08-29T09:25:26.000Z","path":"2018/08/29/java-ssm-2-5/","text":"","tags":[{"name":"教程","slug":"教程","permalink":"http://www.wistbean.com/tags/教程/"},{"name":"Java","slug":"Java","permalink":"http://www.wistbean.com/tags/Java/"},{"name":"Java视频教程","slug":"Java视频教程","permalink":"http://www.wistbean.com/tags/Java视频教程/"},{"name":"项目实战","slug":"项目实战","permalink":"http://www.wistbean.com/tags/项目实战/"},{"name":"分布式","slug":"分布式","permalink":"http://www.wistbean.com/tags/分布式/"},{"name":"SSM","slug":"SSM","permalink":"http://www.wistbean.com/tags/SSM/"},{"name":"Maven","slug":"Maven","permalink":"http://www.wistbean.com/tags/Maven/"},{"name":"InteliJ IDEA","slug":"InteliJ-IDEA","permalink":"http://www.wistbean.com/tags/InteliJ-IDEA/"}]},{"title":"「2-4」使用InteliJ IDEA 创建分布式多模块 Maven 项目","date":"2018-08-29T09:25:25.000Z","path":"2018/08/29/java-ssm-2-4/","text":"","tags":[{"name":"教程","slug":"教程","permalink":"http://www.wistbean.com/tags/教程/"},{"name":"Java","slug":"Java","permalink":"http://www.wistbean.com/tags/Java/"},{"name":"Java视频教程","slug":"Java视频教程","permalink":"http://www.wistbean.com/tags/Java视频教程/"},{"name":"项目实战","slug":"项目实战","permalink":"http://www.wistbean.com/tags/项目实战/"},{"name":"分布式","slug":"分布式","permalink":"http://www.wistbean.com/tags/分布式/"},{"name":"SSM","slug":"SSM","permalink":"http://www.wistbean.com/tags/SSM/"},{"name":"Maven","slug":"Maven","permalink":"http://www.wistbean.com/tags/Maven/"},{"name":"InteliJ IDEA","slug":"InteliJ-IDEA","permalink":"http://www.wistbean.com/tags/InteliJ-IDEA/"}]},{"title":"「2-3」使用 InteliJ IDEA 创建 Maven 项目与相关配置","date":"2018-08-29T09:25:24.000Z","path":"2018/08/29/java-ssm-2-3/","text":"","tags":[{"name":"教程","slug":"教程","permalink":"http://www.wistbean.com/tags/教程/"},{"name":"Java","slug":"Java","permalink":"http://www.wistbean.com/tags/Java/"},{"name":"Java视频教程","slug":"Java视频教程","permalink":"http://www.wistbean.com/tags/Java视频教程/"},{"name":"项目实战","slug":"项目实战","permalink":"http://www.wistbean.com/tags/项目实战/"},{"name":"分布式","slug":"分布式","permalink":"http://www.wistbean.com/tags/分布式/"},{"name":"SSM","slug":"SSM","permalink":"http://www.wistbean.com/tags/SSM/"},{"name":"Maven","slug":"Maven","permalink":"http://www.wistbean.com/tags/Maven/"},{"name":"InteliJ IDEA","slug":"InteliJ-IDEA","permalink":"http://www.wistbean.com/tags/InteliJ-IDEA/"}]},{"title":"「2-2」码农商城 SSM 系统所需的 Maven 模块简介","date":"2018-08-29T09:25:23.000Z","path":"2018/08/29/java-ssm-2-2/","text":"","tags":[{"name":"教程","slug":"教程","permalink":"http://www.wistbean.com/tags/教程/"},{"name":"Java","slug":"Java","permalink":"http://www.wistbean.com/tags/Java/"},{"name":"Java视频教程","slug":"Java视频教程","permalink":"http://www.wistbean.com/tags/Java视频教程/"},{"name":"项目实战","slug":"项目实战","permalink":"http://www.wistbean.com/tags/项目实战/"},{"name":"分布式","slug":"分布式","permalink":"http://www.wistbean.com/tags/分布式/"},{"name":"SSM","slug":"SSM","permalink":"http://www.wistbean.com/tags/SSM/"},{"name":"Maven","slug":"Maven","permalink":"http://www.wistbean.com/tags/Maven/"}]},{"title":"「2-1」什么是Maven，Maven的配置","date":"2018-08-29T09:25:22.000Z","path":"2018/08/29/java-ssm-2-1/","text":"","tags":[{"name":"教程","slug":"教程","permalink":"http://www.wistbean.com/tags/教程/"},{"name":"Java","slug":"Java","permalink":"http://www.wistbean.com/tags/Java/"},{"name":"Java视频教程","slug":"Java视频教程","permalink":"http://www.wistbean.com/tags/Java视频教程/"},{"name":"项目实战","slug":"项目实战","permalink":"http://www.wistbean.com/tags/项目实战/"},{"name":"分布式","slug":"分布式","permalink":"http://www.wistbean.com/tags/分布式/"},{"name":"SSM","slug":"SSM","permalink":"http://www.wistbean.com/tags/SSM/"},{"name":"Maven","slug":"Maven","permalink":"http://www.wistbean.com/tags/Maven/"}]},{"title":"「1-4」GitHub完全使用指南","date":"2018-08-29T09:25:21.000Z","path":"2018/08/29/java-ssm-1-4/","text":"","tags":[{"name":"教程","slug":"教程","permalink":"http://www.wistbean.com/tags/教程/"},{"name":"Java","slug":"Java","permalink":"http://www.wistbean.com/tags/Java/"},{"name":"Java视频教程","slug":"Java视频教程","permalink":"http://www.wistbean.com/tags/Java视频教程/"},{"name":"项目实战","slug":"项目实战","permalink":"http://www.wistbean.com/tags/项目实战/"},{"name":"分布式","slug":"分布式","permalink":"http://www.wistbean.com/tags/分布式/"},{"name":"SSM","slug":"SSM","permalink":"http://www.wistbean.com/tags/SSM/"},{"name":"Git","slug":"Git","permalink":"http://www.wistbean.com/tags/Git/"},{"name":"GitHub","slug":"GitHub","permalink":"http://www.wistbean.com/tags/GitHub/"}]},{"title":"「1-3」代码托管Git的使用","date":"2018-08-29T09:25:20.000Z","path":"2018/08/29/java-ssm-1-3/","text":"","tags":[{"name":"教程","slug":"教程","permalink":"http://www.wistbean.com/tags/教程/"},{"name":"Java","slug":"Java","permalink":"http://www.wistbean.com/tags/Java/"},{"name":"Java视频教程","slug":"Java视频教程","permalink":"http://www.wistbean.com/tags/Java视频教程/"},{"name":"项目实战","slug":"项目实战","permalink":"http://www.wistbean.com/tags/项目实战/"},{"name":"分布式","slug":"分布式","permalink":"http://www.wistbean.com/tags/分布式/"},{"name":"SSM","slug":"SSM","permalink":"http://www.wistbean.com/tags/SSM/"},{"name":"Git","slug":"Git","permalink":"http://www.wistbean.com/tags/Git/"}]},{"title":"「1-2」传统的集群架构和分布式架构区别","date":"2018-08-29T09:25:19.000Z","path":"2018/08/29/java-ssm-1-2/","text":"","tags":[{"name":"教程","slug":"教程","permalink":"http://www.wistbean.com/tags/教程/"},{"name":"Java","slug":"Java","permalink":"http://www.wistbean.com/tags/Java/"},{"name":"Java视频教程","slug":"Java视频教程","permalink":"http://www.wistbean.com/tags/Java视频教程/"},{"name":"项目实战","slug":"项目实战","permalink":"http://www.wistbean.com/tags/项目实战/"},{"name":"分布式","slug":"分布式","permalink":"http://www.wistbean.com/tags/分布式/"},{"name":"SSM","slug":"SSM","permalink":"http://www.wistbean.com/tags/SSM/"},{"name":"架构","slug":"架构","permalink":"http://www.wistbean.com/tags/架构/"}]},{"title":"「1-1」分布式高并发java web项目实战视频教程介绍","date":"2018-08-29T09:25:18.000Z","path":"2018/08/29/java-ssm-1-1/","text":"","tags":[{"name":"教程","slug":"教程","permalink":"http://www.wistbean.com/tags/教程/"},{"name":"Java","slug":"Java","permalink":"http://www.wistbean.com/tags/Java/"},{"name":"Java视频教程","slug":"Java视频教程","permalink":"http://www.wistbean.com/tags/Java视频教程/"},{"name":"项目实战","slug":"项目实战","permalink":"http://www.wistbean.com/tags/项目实战/"},{"name":"分布式","slug":"分布式","permalink":"http://www.wistbean.com/tags/分布式/"},{"name":"SSM","slug":"SSM","permalink":"http://www.wistbean.com/tags/SSM/"}]},{"title":"CentOS快速搭建一个属于自己的IPsec/L2TP VPN","date":"2018-08-29T09:16:04.000Z","path":"2018/08/29/ipsec,l2tp_vpn/","text":"搭建IPsec/L2TP VPN的准备 一台云服务器VPS 远程连接VPS工具 1.我使用的云服务器是搬瓦工官网，因为性价比高，一年也就十几刀，速度快。 如何拿到搬瓦工优惠码之前说过，可以看这里：拿到搬瓦工优惠码 2.远程连接工具我一直用的是 SecureCRT , 当然你也可以使用其它的 SSH 工具。 开始搭建 IPsec/L2TP VPN获取搬瓦工服务器的ip，端口，账号密码有了搬瓦工服务器的IP地址和端口我们就可以连接了： 搭建 IPsec/L2TP VPN 账号是root，密码可以在这里获取： 搭建 IPsec/L2TP VPN 使用 SSH 工具连接到服务器 搭建 IPsec/L2TP VPN 使用 IPsec/L2TP 脚本搭建在这里感谢hwdsl2提供的脚本，我们在连接到服务器后使用如下命令： 安装 wget ： yum install wget 使用脚本： wget https://git.io/vpnsetup-centos -O vpnsetup.sh &amp;&amp; sudo sh vpnsetup.sh 稍等一会安装成功会提供一个 VPN 需要的信息： Server IP: xxx.xx.xx.xx IPsec PSK: xxxx Username: xxxx Password: xxxx 这时候就搭建成功了，快吧？ windowns 7 使用IPsec/L2TP VPN设置VPN连接单击开始菜单，选择控制面板。 进入 网络和Internet 部分。 单击 网络与共享中心。 单击 设置新的连接或网络。 选择 连接到工作区，然后单击 下一步。 单击 使用我的Internet连接 (VPN)。 在 Internet地址 字段中输入你的 VPN 服务器 IP。 在 目标名称 字段中输入任意内容。 选中 现在不连接；仅进行设置以便稍后连接 复选框。 单击 下一步。 在 用户名 字段中输入你的 VPN 用户名。 在 密码 字段中输入你的 VPN 密码。 选中 记住此密码 复选框。 单击 创建，然后单击 关闭 按钮。 返回 网络与共享中心。单击左侧的 更改适配器设置。 右键单击新创建的 VPN 连接，并选择 属性。 单击 选项 选项卡，取消选中 包括Windows登录域 复选框。 单击 安全 选项卡，从 VPN 类型 下拉菜单中选择 &quot;使用 IPsec 的第 2 层隧道协议 (L2TP/IPSec)&quot;。 单击 允许使用这些协议。确保选中 &quot;质询握手身份验证协议 (CHAP)&quot; 复选框。 单击 高级设置 按钮。 单击 使用预共享密钥作身份验证 并在 密钥 字段中输入你的 VPN IPsec PSK。 单击 确定 关闭 高级设置。 单击 确定 保存 VPN 连接的详细信息。 添加注册表新建一个TXT文件，输入以下内容： Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\services\\RasMan\\Parameters] &quot;ProhibitIpSec&quot;=dword:00000000 [HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\PolicyAgent] &quot;AssumeUDPEncapsulationContextOnSendRule&quot;=dword:00000002 另存为.reg格式的文件，然后双击。 启动服务将以下服务全部设置为自动启用，要不然会连接不成功： IPsec Policy Agent Routing and Remote Access Remote Access Auto Connection Manager Remote Access Connection Manager Secure Socket Tunneling Protocol Service 重启电脑后连接重启电脑后，点击右下角的网络连接，双击VPN连接，即可成功连接： 搭建 IPsec/L2TP VPN 连接效果 搭建 IPsec/L2TP VPN iPhone/iPad 使用IPsec/L2TP VPN进入设置 -&gt; 通用 -&gt; VPN。 单击 添加VPN配置...。 单击 类型 。选择 L2TP 并返回。 在 描述 字段中输入任意内容。 在 服务器 字段中输入你的 VPN 服务器 IP。 在 帐户 字段中输入你的 VPN 用户名。 在 密码 字段中输入你的 VPN 密码。 在 密钥 字段中输入你的 VPN IPsec PSK。 启用 发送所有流量 选项。 单击右上角的 存储。 启用 VPN 连接。 搭建 IPsec/L2TP VPN 搭建 IPsec/L2TP VPN 其它客户端连接方式请参考：配置 IPsec/L2TP VPN 客户端 参考文章IPsec VPN 服务器一键安装脚本 自己搭建VPN服务器 使用搬瓦工快速搭建自己的VPN","tags":[{"name":"vpn搭建","slug":"vpn搭建","permalink":"http://www.wistbean.com/tags/vpn搭建/"},{"name":"搬瓦工","slug":"搬瓦工","permalink":"http://www.wistbean.com/tags/搬瓦工/"},{"name":"IPsec/L2TP","slug":"IPsec-L2TP","permalink":"http://www.wistbean.com/tags/IPsec-L2TP/"}]},{"title":"编程人生中的两个小经验","date":"2018-07-12T13:55:11.000Z","path":"2018/07/12/programing-experience/","text":"怎么让自己比别人牛逼一点点？其实说实话，现在不管是培训出身还是院校出身，现在开始去互联网公司上班，相对来说起步有一点晚了，工作也没有以往那么好找了。 不过你应该可以看到一个普遍的现象，就是现在大多的程序员在编程的时候，所借助的资源大部分来源于百度，CSDN博客，还有一些其它的论坛。 不是说这些不好，只是大部分质量参差不齐，有些博客抄来抄去，你很难去费很多时间精力去筛选，去辨别。 那么这个时候应该怎么办呢？最好的方式就是走比别人相对难一点点的路，怎么说呢？就比如别人在百度的时候，你已经花了点钱自己搭了个vpn上google搜索第一手资料，别人在看国内的博客的时候，你已经一边翻译一边看着官方文档，虽然很多英语都不懂，但是如果坚持一点一点坑下去的话，其实差距慢慢就拉开了。当别人还在把遇到的报错截图发给别人问怎么办的时候，你已经学会试着看看源代码别人是怎么写的。你会去github上pull跟自己最近水平相当的项目进行学习了等。 这以上举的例子要说明的就是：虽然起步比别人晚，但是不代表结果就是人家先到终点，别人在一小步一小步的走甚至停留在原地的时候，我们可以让自己的步伐跨的大一点，也就是提高自己的起点，当然刚开始很难，但是能够转变这种思维，一直坚持下去的话，到时候回头看的时候，才发现，原来你已经走了这么远了，而别人，还在原地。 选择是很重要，但是要学会选择很难我们都知道，选择比努力重要，如果你一不小心选择错了方向，那么很可能就南辕北辙了，这是非常不值当的，如果能在对的方向努力下去，那么有一天才能收获你的果实。举个不恰当的例子：你去追一个女孩子，人家对你一点兴趣都没有，你一个劲的给对方自以为的感动，人家只会觉得很烦，离你越远越好。 所以选择是很重要的，你需要要有辨别能力，需要对信息有足够的敏感度，比如现在新手，想要开始学编程，从事互联网的事业，那么选择什么方向呢? 是Android，还是iOS，还是java，还是 python？ 如果这时候你没有一个好的选择，真的不同的努力结果差别会很大。 就拿 Android 和 python 来说，现在 Android 开发已经没有那么火了，为什么？市场已经很饱和了，而且现在Android对中高级的人才需要比较多，而如果你现在开始学Android，学个一两年，到时候可能你已经算是Android中级开发者了，可是人家不需要了。 而现在的人工智能，数据分析，区块链等都是趋势，这时候 python 借势火了一把，很多公司都需要 python 的人才了， 所以从现在来说，一个学习 Android，一个学习 python，一年后，谁更容易找到工作，谁更被需要？ 答案肯定显而易见了。 选择是很重要，但是要学会选择很难，因为你需要信息的敏感认知，而这些信息不是说你看书就能找到了，你需要有自己的圈子，有一个环境，有一个耳渲目染的地方，而这些，除了靠自己的人品之外，还需要自己多提升自己，打入更大的圈子，去学习，去交流。","tags":[{"name":"编程","slug":"编程","permalink":"http://www.wistbean.com/tags/编程/"},{"name":"个人观点","slug":"个人观点","permalink":"http://www.wistbean.com/tags/个人观点/"},{"name":"关于我","slug":"关于我","permalink":"http://www.wistbean.com/tags/关于我/"}]},{"title":"使用搬瓦工快速搭建自己的VPN","date":"2018-06-10T09:06:26.000Z","path":"2018/06/10/banwagong-vpn/","text":"1.使用搬瓦工搭建自己的VPN很多人想要使用 VPN ，不过去购买第三方的「VPN账号」除了不稳定外还怕不安全，有些第三方 VPN 会获取用户的数据做一些坏事，还特么限制网速，不能忍！ 所以想要自己买一台服务器，然后搭建一个完全属于自己的 VPN ，稳定快速又安全！ 那么就在这里教大家使用搬瓦工官网（性价比很高的云服务器提供商）来快速的搭建自己的VPN。而且我还会告诉大家怎么花比别人少的钱购买服务器，下文将会提到怎么获取优惠码，一般人很少知道的！ 2.使用搬瓦工搭建VPN前的准备 一台可以上网的电脑。 支付宝或者PayPal账号， 搬瓦工支持支付宝付款。 3.购买搬瓦工VPS云服务器3.1选择搬瓦工VPS服务器点击搬瓦工官网进入搬瓦工官网（待会在这里可以从中拿到优惠码）。进入之后可以看到可以购买的VPS云服务器，个人使用的话购买最便宜的就好了，比如这里有个19.99刀一年就不错: 使用搬瓦工搭建VPN 不过便宜的很抢手，很快就会被人买光，比如这里 no stock 就说明被人买光了： 使用搬瓦工搭建VPN 3.2拿到搬瓦工优惠码ok，我们点击「Order KVM」: 使用搬瓦工搭建VPN 当你进到这个页面的时候呢，别急着点击「Add to Cart」添加到购物车，这里面暗藏着一个优惠码，很多人不知道，使用浏览器查看源代码，chrome浏览器的话按F12，然后搜索「code」，你会发现有一个 「Try this promo code: xxxx 」，这个xxxx就是优惠码，你把他复制下来，待会有用。 使用搬瓦工搭建VPN 页面的 Location 就是选择服务器的地址，到时访问谷歌的时候会显示你当前访问的地址。好了，我们点击「Add to Cart」。 接下来，进入结算页面，我们刚才复制的优惠码就派上用场了，将你刚刚复制的优惠码复制进去然后点击 「Validate Code」，看！是不是优惠了！一般人不知道这种操作: 使用搬瓦工搭建VPN 接着点击「CheckOut」完成付款即可。付款的时候选择 Alipay 就可以使用支付宝付款。 使用搬瓦工搭建VPN 4.快速搭建搬瓦工VPN购买完毕后你就拥有一台你自己的服务器了，接着点击Services下的MyServices，可以看到你的服务器： 使用搬瓦工搭建VPN 我们点击「KiwiVM Control Panel」进入管理界面： 使用搬瓦工搭建VPN 可以看到你服务器的信息: 使用搬瓦工搭建VPN 接着我们点击 「OpenVPN Server」： 使用搬瓦工搭建VPN 接着点击：「Install and configer OpenVPN Server」，搬瓦工会自动帮我们在服务器安装和配置，不需要自己手动敲命令了： 使用搬瓦工搭建VPN 等一会就搭建好VPN了，就问你快不？ 使用搬瓦工搭建VPN 5.使用搬瓦工openVPNPC端使用搬瓦工VPN首先我们下载我们的VPN文件所需的配置文件，点击「Download key Files」下载，然后再下载openVPN的客户端： 使用搬瓦工搭建VPN 接着将配置文件解压到openVPN客户端的config文件夹下： 使用搬瓦工搭建VPN 使用搬瓦工搭建VPN 接着再openvpn目录下的bin目录双击打开openvpn-gui，然后Connect连接，连接完成右下角的openVPN会成为绿色状态，然后就可以访问外网了，速度很快： 使用搬瓦工搭建VPN 使用搬瓦工搭建VPN 使用搬瓦工搭建VPN iPhone端使用搬瓦工VPN同样，手机也需要安装一个openVPN的客户端，不过你在中国区的 AppleStore 下载不到 openVPN 的，你需要注册一个美区的苹果账号，然后搜索 openVPN 下载： 使用搬瓦工搭建VPN 接着电脑端下载 iTunes ，打开 iTunes ，手机用数据线连接电脑，点击文件共享： 使用搬瓦工搭建VPN 将刚刚下载的vpn文件解压，然后添加到OpenVPN客户端： 使用搬瓦工搭建VPN 手机打开OpenVPN APP， 点击 + 这个按钮： 使用搬瓦工搭建VPN 然后就可以连接了： 使用搬瓦工搭建VPN 访问速度杠杠的： 使用搬瓦工搭建VPN 使用搬瓦工搭建VPN Android端使用搬瓦工VPNAndroid手机使用搬瓦工openVpn同上，下载openVpn App ，然后把配置文件传上去就行了。 相关文章利用搬瓦工VPS自建高速丝滑VPN 在搬瓦工中搭建个人vpn","tags":[{"name":"vpn搭建","slug":"vpn搭建","permalink":"http://www.wistbean.com/tags/vpn搭建/"},{"name":"搬瓦工","slug":"搬瓦工","permalink":"http://www.wistbean.com/tags/搬瓦工/"}]},{"title":"Linux 学习启动篇","date":"2017-03-31T09:25:18.000Z","path":"2017/03/31/satrt-learning-linux/","text":"从这篇文章起，就意味着开始着手学习使用Linux系统了，虽然经常听到Linux操作系统，但是或许正在着手去操作使用的人还是少数的，甚至连什么是Linux都不知道的人也大有所在。那么这篇 「Linux学习启动篇」 将从0开始，首先了解Linux是干嘛的？能在Linux上做些什么事情？接下来再和我一起深入学习！ 1.什么是LinuxLinux是一种自由和开放源代码的类UNIX操作系统。 Linux是自由开放源代码的，这个系统的内核是由「Linus Torvalds（中文名：林纳斯·托瓦兹）」在1991年10月5日发布的，其实Linux本来指的是Linux内核本身，但是通常都用了「Linux内核」来称呼，而Linux就代表了 Linux内核 + 用户空间的应用程序 构成的完整操作系统。 2.开源协议Linux如此受欢迎的其中一个原因就是它开源，这意味着任何个人或者机构都可以很自由的使用Linux里面所有的源代码，你可以对它进行修改生成新的版本然后再发布出来成为你的东西。但是前提是遵循「GUN GPL协议」。 GUN GPL(GUN General Public License)，通用公共许可协议，这是由理查德·斯托曼发起的，许多自由软件和开放源码都采用了这个协议条款，任何个人或者机构使用基于GPL进行衍生发布时必须采用GPL协议许可，而且需要公开源代码。 3.Linux使用领域「服务器领域」： Linux已经在服务器领域占了大半壁江山，随着开源软件的日益强大，Linux服务器操作系统已经越来越多人使用。应该很少人会用windows server了吧。 Linux发行版一直被用来作为服务器的操作系统，并且已经在该领域中占据重要地位。根据2006年9月Netcraft的报告显示，十个最大型的网络托管公司有八个公司在其Web服务器运行Linux发行版。Linux发行版是构成LAMP（Linux操作系统，Apache，MySQL，Perl / PHP / Python）的重要部分，LAMP是一个常见的网站托管平台，在开发者中已经得到普及。 「移动设备嵌入领域」： Linux的低成本、强大的定制功能以及良好的移植性能，在智能手机、平板电脑等移动设备方面，Android手机就是Google开发的基于Linux平台的开源手机操作系统。现在市场上Android手机仍然是占了最大的移动操作系统份额。阿里云的YunOS系统也是基于Linux的，越来越多的系统都使用了Linux。 「桌面领域」： 现在大多数在Windows平台上广泛使用的自由软件都有相应的Linux版本，现在Linux桌面系统的发展也是越来越多了，像国内的红旗Linux，深度Linux，还有你可能经常听到的Ubuntu系统，都是基于Linux的桌面操作系统。 目前能在Windows或Mac OS上运行的应用软件大部分都没有Linux的版本，不过在Linux平台上通常可以找到类似功能的应用软件。大多数在Windows平台上广泛使用的自由软件都有相应的Linux版本，例如Mozilla Firefox、Apache OpenOffice、Pidgin、VLC、GIMP；部分流行的专有软件也有相应的Linux版本，如Adobe Flash Player、Adobe Reader、Google Earth、Nero Burning ROM、Opera、Maple、MATLAB、Skype、Maya、SPSS、Google Chrome。 4.Linux发行版Linux的发行版实在太多了，这里列举几个常见的发行版本。 Debian GNU/Linux 7.0： debian Gentoo Linux 12.0： Gentoo Linux Mint 14： Linux Mint 14 Fedora： Fedora Ubuntu： Ubuntu 以上列举的这几个都是有桌面版的，但是我们学习Linux主要还是对命令行进行学习，对于学习和使用的系统我们选择不是以上这几个，而是centOS系统，那么为什么选择centOS？ 5.选择centOS版本进行学习早前 Red Hat公司 就发行了「Red Hat Linux」的个人版本，到了Red Hat 9.0版本后，Red Hat公司就不再发行桌面版的发行套件了，Red Hat Linux 也就停止了开发，而开始全力集中转向服务器版本上，也就是Red Hat Enterprise Linux（企业版本）。 后来 Red Hat Linux 的桌面版本与来自开源社区的Fedora进行合并，Red Hat Linux 桌面版就称为了 Fedroa Core。 所以目前Red Hat有：免费的Fedroa Core版本，也有收费的Red Hat Enterprise Linux版本。Red Hat Enterprise Linux都会在Fedroa Core版本的基础上进行升级，大约发布6个Fedroa Core版本就会发布一个Red Hat Enterprise Linux版本。 因为之前我们讲过了，Red Hat的企业版本虽然收费的，但是它依照开原协议必须公开源代码，那么这个是时候CentOS就出现了，它的全名是（Community Enterprise Operating Systeam 社区企业操作系统），centOS和Red Hat企业版本的不同之处在于centOS没有包含封闭源码的软件，所以centOS可以自由使用，而且可以长期的享受它的免费升级和服务。 所以选择centOS版本进行学习是很有必要的：目前网络上80%的Linux资源都是基于centOS的发行版的，可以供我们更多的资源查找和学习帮助。centOS版本在许多开源镜像网站可以轻松获取。centOS也具有经典性和代表性，绝大多数物联网公司的后台服务器都使用的是centOS发行版本。 所以综上：选择centOS版本是比较好的。接下来就和我一起学习Linux吧，就从安装虚拟机开始，如何？","tags":[{"name":"教程","slug":"教程","permalink":"http://www.wistbean.com/tags/教程/"},{"name":"Linux","slug":"Linux","permalink":"http://www.wistbean.com/tags/Linux/"}]}]